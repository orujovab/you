#include <cstdio>
#include <cmath>
#include <iostream>
#include <algorithm>

using namespace std;

#define maxn 1010

const int inf = 1000000;
int n, m, u[maxn*maxn], v[maxn*maxn], r[maxn*maxn], p[maxn*maxn];
double w[maxn*maxn];

int cmp(const int i, const int j)
{
	return w[i] < w[j];
}

int find(int x)
{
	return p[x] == x ? x : p[x] = find(p[x]);
}

double Kruskal()
{
	double ans = 0;
	for (int i = 0; i < n; i++) p[i] = i;
	for (int j = 0; j < m; j++) r[j] = j;
	sort(r, r + m, cmp);
	for (int i = 0; i < m; i++)
	{
		int e = r[i];
		int x = find(u[e]);
		int y = find(v[e]);
		if (x != y)
		{
			ans += w[e];
			p[x] = y;
		}
	}
	return ans;
}

struct node
{
	double x, y;
};

node kill[maxn];

int main()
{
	int t;
	while (cin >> t){
		if (t == 0) break;
		n = 0, m = 0;
		n = t;
		double kiss;
		for (int i = 0; i < n; i++) cin >> kill[i].x >> kill[i].y;
		for (int i = 0; i < t; i++)
		{
			for (int j = i + 1; j < t; j++)
			{
				kiss = sqrt((kill[i].x - kill[j].x)*(kill[i].x - kill[j].x) + (kill[i].y - kill[j].y)*(kill[i].y - kill[j].y));
				u[m] = i;
				v[m] = j;
				w[m++] = kiss;
			}
		}
		printf("%.2lf\n", Kruskal());
	}
	return 0;
}
