#include <iostream>
#include <string.h>

using namespace std;

#define MAX 30
int a, b, i, j, k, n, v, m[MAX][MAX];

//Функция FloydWarshall реализует алгоритм Флойда – Уоршела и
//вычисляет количество путей между вершинами i и j при отсутствии циклов.
//Но даже если в графе присутствуют циклы, но между вершинами i и j существует
//конечное количество путей, то оно будет занесено в m[i][j].
void FloydWarshall()
{
	int i, j, k;
	for (k = 0; k <= v; k++)
		for (i = 0; i <= v; i++)
			for (j = 0; j <= v; j++) m[i][j] += m[i][k] * m[k][j];
}

int main() {
	//В переменной v вычисляем количество вершин в графе. Нам известно, что
	//перекрестки последовательно пронумерованы с 0 до “наибольшего” перекрестка.
	scanf("%d", &n);
	memset(m, 0, sizeof m);
	for (v = i = 0; i < n; i++)
	{
		scanf("%d %d", &a, &b);
		m[a][b] = 1;
		if (a > v) v = a;
		if (b > v) v = b;
	}

	//Запускаем алгоритм Флойда – Уоршела, вычисляем количество путей между парами вершин.
	FloydWarshall();

	//Займемся обработкой циклов. Находим все такие вершины k, для которых существует путь из k в k.
	//При этом если существуют пути из i в k и из k в j, то между i и j существует бесконечное количество путей.
	//Устанавливаем m[i][j] = –1.
	for (k = 0; k <= v; k++)
		if (m[k][k])
			for (i = 0; i <= v; i++)
				for (j = 0; j <= v; j++)
					if (m[i][k] && m[k][j]) m[i][j] = -1;

	//Выводим результирующую матрицу, которая содержит количество разных путей между перекрестками.

	for (i = 0; i <= v; i++)
	{
		printf("%d", m[i][0]);
		for (j = 1; j <= v; j++) printf(" %d", m[i][j]);
		printf("\n");
	}
	return 0;
}
