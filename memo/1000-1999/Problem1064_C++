#include <iostream>
#include <vector>

using namespace std;

int n, index = 0;
char d[50][50], dTMP[50][50];
pair <char, char> _beg, _end;
bool input = false;
vector<pair<pair<char, char>, int>> vect;

void PushtoVect(char x, char y, int k)
{
	if (0 <= x && x < n && 0 <= y && y < n)
		if (dTMP[x][y] != '#')
		{
			dTMP[x][y] = '#';
			vect.push_back(make_pair(make_pair(x, y), k));
		}
}

int main()
{
	char ch, X, Y;
	cin >> n;
	for (char i = 0; i < n; i++)
		for (char j = 0; j < n; j++)
		{
			cin >> ch;
			if (ch == '@' && !input) _beg = make_pair(i, j), input = true;
			else if (ch == '@') _end = make_pair(i, j);
			d[i][j] = dTMP[i][j] = ch;
		}
	PushtoVect(_beg.first, _beg.second, 0);
	while (vect[index].first != _end)
	{
		X = vect[index].first.first;
		Y = vect[index].first.second;
		PushtoVect(X + 1, Y + 2, index);
		PushtoVect(X + 2, Y + 1, index);
		PushtoVect(X - 1, Y + 2, index);
		PushtoVect(X + 2, Y - 1, index);
		PushtoVect(X + 1, Y - 2, index);
		PushtoVect(X - 2, Y + 1, index);
		PushtoVect(X - 1, Y - 2, index);
		PushtoVect(X - 2, Y - 1, index);
		index++;
		if (index >= vect.size())
		{
			cout << "Impossible" << endl;
			return 0;
		}
	}
	while (index != 0)
	{
		d[vect[index].first.first][vect[index].first.second] = '@';
		index = vect[index].second;
	}
	for (char i = 0; i < n; i++)
	{
		for (char j = 0; j < n; j++) cout << d[i][j];
		cout << endl;
	}
}
