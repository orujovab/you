#include <iostream>
#include <cassert>
#include <cstring>
#include <cstdio>
#include <vector>

using namespace std;

const int MAXN = 1024;

int dl[MAXN], dr[MAXN], L[MAXN], R[MAXN];
bool visited[MAXN];

long long gcd(long long a, long long b){
	return b > 0 ? gcd(b, a%b) : a;
}

long long lcm(long long a, long long b) {
	return a * b / gcd(a, b);
}

long long myCeil(long long a, long long b) {
	return (a + b - 1) / b;
}

struct Frac {
	long long a, b;
	Frac(long long x, long long y) {
		long long g = gcd(x, y);
		a = x / g;
		b = y / g;
	}
	Frac() {
		a = 0;
		b = 1;
	}
	Frac operator * (const Frac &t) const {
		long long up = a * t.a, down = b * t.b;
		return Frac(up, down);
	}
	void print() {
		cout << a << "/" << b << endl;
	}
};

Frac coef[MAXN];

void fill(int u) {
	visited[u] = true;
	if (L[u] == -1 || R[u] == -1) return;
	Frac k = Frac(dr[u], dr[u] + dl[u]);
	coef[L[u]] = coef[u] * k;
	fill(L[u]);
	k = Frac(dl[u], dr[u] + dl[u]);
	coef[R[u]] = coef[u] * k;
	fill(R[u]);
}

int main(){
	int n, run = 1, weight[MAXN], P[MAXN];
	while (cin >> n) {
		if (n == 0) break;
		for (int i = 0; i < MAXN; ++i) {
			P[i] = L[i] = R[i] = -1;
			dl[i] = dr[i] = -1;
			weight[i] = -1;
		}
		for (int i = 0; i < n; ++i) {
			cin >> dl[i] >> dr[i];
			char p, q;
			cin >> p >> q;
			int l, r;
			cin >> l >> r;
			l--;
			r--;
			if (p == 'W') l += n;
			if (q == 'W') r += n;
			L[i] = l;
			R[i] = r;
			P[l] = i;
			P[r] = i;
		}
		int first, bound; cin >> first >> bound;
		first--;
		first += n;
		printf("Case %d: ", run++);
		int root;
		for (int i = 0; i < MAXN; ++i) {
			if (P[i] == -1) {
				root = i;
				break;
			}
		}
		memset(visited, 0, sizeof visited);
		coef[root] = Frac(1, 1);
		fill(root);
		long long _lcm = -1;
		vector<int> hojas;
		for (int i = 0; i < MAXN; ++i) {
			if (!visited[i]) break;
			if (L[i] == -1 && R[i] == -1) hojas.push_back(i);
		}
		for (int k = 0; k < hojas.size(); ++k) {
			int h = hojas[k];
			if (_lcm == -1) _lcm = coef[h].b;
			else _lcm = lcm(_lcm, coef[h].b);
		}
		assert(first >= n);
		long long times = myCeil(coef[first].b * bound, _lcm * coef[first].a);
		cout << _lcm * times << endl;
	}
	return 0;
}
