#include <iostream>
#include <vector>
#include <algorithm>
#include <cstring>

using namespace std;
typedef struct
{
	int i, Dot, Score;
	char Name[50];
}Information;

bool cmp(Information c1, Information c2)
{
	if (c1.Score < c2.Score) return false;
	if (c1.Score == c2.Score)
	{
		if (c1.Dot < c2.Dot) return false;
		if (c1.Dot == c2.Dot)
		{
			if (c1.i < c2.i) return true;
			return false;
		}
		return true;
	}
	return true;
}

int main()
{
	int i, s, maxs, Scenario, istirakSayi, roundSayi, FirstTeamPoint, SecondTeamPoint, GuessFirstTeamPoint, GuessSecondTeamPoint;
	int NumberOfSmallRound, ScoreOfPaticipate[50], DotOfPaticipate[50], ScoreOfEachRound[50];
	char ch, nameofpaticipate[50][100];
	Information Temp;
	cin >> s;
	Scenario = 1;
	while (s)
	{
		vector<Information> OutputInformation;
		memset(ScoreOfPaticipate, 0, sizeof(ScoreOfPaticipate));
		memset(DotOfPaticipate, 0, sizeof(DotOfPaticipate));
		cin >> istirakSayi >> roundSayi;
		ch = getchar();
		for (i = 0; i<istirakSayi; i++) gets(nameofpaticipate[i]);
		cout << "Scenario #" << Scenario << ":" << endl;
		Scenario++;
		while (roundSayi)
		{
			cin >> NumberOfSmallRound;
			memset(ScoreOfEachRound, 0, sizeof(ScoreOfEachRound));
			while (NumberOfSmallRound)
			{
				cin >> FirstTeamPoint >> ch >> SecondTeamPoint;
				for (i = 0; i < istirakSayi; i++)
				{
					cin >> GuessFirstTeamPoint >> ch >> GuessSecondTeamPoint;
					if (GuessFirstTeamPoint == FirstTeamPoint && SecondTeamPoint == GuessSecondTeamPoint)
					{
						ScoreOfPaticipate[i] += 3;
						ScoreOfEachRound[i] += 3;
					}
					else if (FirstTeamPoint > SecondTeamPoint && GuessFirstTeamPoint > GuessSecondTeamPoint)
					{
						ScoreOfPaticipate[i] += 1;
						ScoreOfEachRound[i] += 1;
					}
					else if (FirstTeamPoint < SecondTeamPoint && GuessFirstTeamPoint < GuessSecondTeamPoint)
					{
						ScoreOfPaticipate[i] += 1;
						ScoreOfEachRound[i] += 1;
					}
					else if (FirstTeamPoint == SecondTeamPoint && GuessSecondTeamPoint == GuessFirstTeamPoint && FirstTeamPoint != GuessFirstTeamPoint)
					{
						ScoreOfPaticipate[i] += 1;
						ScoreOfEachRound[i] += 1;
					}
					else
					{
						ScoreOfPaticipate[i] += 0;
						ScoreOfEachRound[i] += 0;
					}
				}
				NumberOfSmallRound--;
			}
			maxs = 0;
			for (i = 0; i < istirakSayi; i++) if (maxs < ScoreOfEachRound[i]) maxs = ScoreOfEachRound[i];
			for (i = 0; i < istirakSayi; i++) if (maxs == ScoreOfEachRound[i]) DotOfPaticipate[i] += 1;
			roundSayi--;
		}
		for (i = 0; i < istirakSayi; i++)
		{
			strcpy(Temp.Name, nameofpaticipate[i]);
			Temp.Score = ScoreOfPaticipate[i];
			Temp.Dot = DotOfPaticipate[i];
			Temp.i = i;
			OutputInformation.push_back(Temp);
		}
		sort(OutputInformation.begin(), OutputInformation.end(), cmp);
		for (i = 0; i < istirakSayi; i++)
		{
			cout << OutputInformation[i].Score << " " << OutputInformation[i].Dot << " " << OutputInformation[i].Name << endl;
		}
		cout << endl;
		s--;
	}
	return 0;
}
