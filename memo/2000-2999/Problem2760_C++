#include <stdio.h> 
#include <math.h> 
#include <algorithm> 

using namespace std;

struct point
{
	int x, y;
} a[10], v[10], s;


double crosstime(double x0, double y0, double v0, double x1, double y1, double vx, double vy)
{
	double a = vx*vx + vy*vy - v0*v0;
	double b = 2 * (vx*(x1 - x0) + vy*(y1 - y0));
	double c = (x1 - x0)*(x1 - x0) + (y1 - y0)*(y1 - y0);
	if (a == 0) return -c / b;
	if (a < 0) { a = -a; b = -b; c = -c; }
	return (-b + sqrt(b*b - 4*a*c)) / (2*a);
}

double back(double x0, double y0, double x1, double y1, double sv)
{
	return sqrt((x1 - x0)*(x1 - x0) + (y1 - y0)*(y1 - y0)) / sv;
}

void trs(double ans, int T[3])
{
	T[0] = (int)ans;
	ans -= T[0];
	T[1] = (int)(ans *= 60);
	ans -= T[1];
	T[2] = (int)(ans*60 + 0.9999999);
	if (T[2] == 60) { T[2] = 0; T[1]++; }
	if (T[1] == 60) { T[1] = 0; T[0]++; }
}

int main()
{
	double t, ans;
	int i, N, sv, js = 1, T[3], p[10];
	while (scanf("%d", &N), N)
	{
		for (i = 0; i < N; i++) scanf("%d%d%d%d", &a[i].x, &a[i].y, &v[i].x, &v[i].y);
		scanf("%d%d%d", &s.x, &s.y, &sv);
		for (i = 0; i <= N; i++) p[i] = i;
		ans = 1e9;
		do
		{
			t = 1.0 + crosstime(s.x, s.y, sv, a[p[0]].x, a[p[0]].y, v[p[0]].x, v[p[0]].y);
			for (i = 1; i < N; i++)
				t += 1.0 + crosstime(a[p[i - 1]].x + t*v[p[i - 1]].x, a[p[i - 1]].y + t*v[p[i - 1]].y, sv, a[p[i]].x + t*v[p[i]].x, a[p[i]].y + t*v[p[i]].y, v[p[i]].x, v[p[i]].y);
			t += back(a[p[N - 1]].x + t*v[p[N - 1]].x, a[p[N - 1]].y + t*v[p[N - 1]].y, s.x, s.y, sv);
			if (t < ans) ans = t;
		} while (next_permutation(p, p + N));
		trs(ans, T);
		printf("Case %d: %d hour(s) %d minute(s) %d second(s)\n", js++, T[0], T[1], T[2]);
	}
	return 0;
}
