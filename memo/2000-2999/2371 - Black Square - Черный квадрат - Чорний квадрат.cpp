#include <iostream>

using namespace std;

char ss[5001];
int i, j, m, n, s, k, sum, pos, start, finish;

int main() {
	//Читаем входные данные.Уменьшим значение k на 1 чтобы нумерация строк начиналась с нуля.
	scanf("%d %d %d %d\n", &m, &n, &s, &k);
	k--;
	gets(ss);

	//Определим положение черных клеток: самая левая клетка будет в позиции
	//start, самая правая в finish. Вычислим общее количество черных клеток sum.
	sum = 0; start = finish = -1;
	for (i = 0; i < n; i++) {
		if (ss[i] == '*')
		{
			sum++;
			if (start == -1) start = i;
			finish = i;
		}
	}
	//Рассмотрим случай, когда в k-ой строке имеются черные клетки. Тогда их количество
	//sum должно равняться длине отрезка[start, finish], а также значению s.
	if (sum > 0 && (sum != finish - start + 1 || sum != s))
	{
		puts("Impossible");
		return 0;
	}
	//Переберем все возможные позиции (i, j) левого верхнего угла квадрата
	//и посчитаем количество вариантов pos расположения квадрата.
	pos = 0;
	for (i = 0; i < m - s + 1; i++) {
		for (j = 0; j < n - s + 1; j++)

			//Если k-ая строка расположена среди строк [i, i + s – 1], то она должна содержать
			//черные клетки, причем самая левая позиция start черных клеток должна равняться j.
			if (i <= k && k <= i + s - 1)
			{
				if (j == start) pos++;
			}
			else
			{
				//Иначе k - ая строка не должна содержать черные клетки(в этом случае start остается равным - 1).
				if (start == -1) pos++;
			}
	}
	//В зависимости от значения pos выводим ответ.
	if (pos == 0) puts("Impossible");
	else if (pos == 1) puts("Unique");
	else puts("Ambiguous");
	return 0;
}
