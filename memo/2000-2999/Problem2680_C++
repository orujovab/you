#include <iostream>
#include <algorithm>
#include <cassert>
#include <cstdio>
#include <vector>

using namespace std;

const int INF = 1 << 29;
int d[105][105];
int shortest[105][105];
vector<int> path;

bool is_shortest(int i, int j) {
	int total = 0;
	for (int k = i; k + 1 <= j; ++k) total += d[path[k]][path[k + 1]];
	return total == shortest[path[i]][path[j]];
}


int main(){
	int n, run = 1;
	while (cin >> n){
		if (n == 0) break;
		printf("Case %d: ", run++);
		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++){
				cin >> d[i][j];
				if (d[i][j] == 0) d[i][j] = INF;
			}
			d[i][i] = 0;
		}

		for (int i = 0; i < n; i++){
			for (int j = 0; j < n; j++) shortest[i][j] = d[i][j];
		}
		for (int k = 0; k < n; ++k) {
			for (int i = 0; i < n; ++i) {
				for (int j = 0; j < n; ++j) shortest[i][j] = min(shortest[i][j], shortest[i][k] + shortest[k][j]);
			}
		}
		int m;
		cin >> m;
		path.resize(m);
		for (int i = 0; i < m; ++i) cin >> path[i];
		assert(m > 0);
		int ans = 0, end = m - 1, cur = 0;
		while (cur != end) {
			if (is_shortest(cur, end)) break;
			for (int i = end - 1; i >= cur; --i) {
				if (is_shortest(cur, i)) {
					ans++;
					cur = i + 1;
					break;
				}
			}
		}
		printf("%d\n", ans);
	}
	return 0;
}
