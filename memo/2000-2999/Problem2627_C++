#include <stdio.h>
#include <string.h>
#include <queue>
#include <deque>

using namespace std;

struct Node {
	int x, y, cap, cost, next;
} edge[1000005];

int e, head[10005];

void addEdge(int x, int y, int cap, int cost) {
	edge[e].x = x, edge[e].y = y, edge[e].cap = cap, edge[e].cost = cost;
	edge[e].next = head[x], head[x] = e++;
	edge[e].x = y, edge[e].y = x, edge[e].cap = 0, edge[e].cost = -cost;
	edge[e].next = head[y], head[y] = e++;
}

int mincost(int s, int t) {
	int i, x, y, mncost = 0, flow, totflow = 0, dis[10005], prev1[10005], record[10005], inq[10005];
	while (true) {
		memset(dis, 63, sizeof(dis));
		int oo = dis[0];
		dis[s] = 0;
		deque<int> Q;
		Q.push_front(s);
		while (!Q.empty()) {
			x = Q.front(), Q.pop_front();
			inq[x] = 0;
			for (i = head[x]; i != -1; i = edge[i].next) {
				y = edge[i].y;
				if (edge[i].cap > 0 && dis[y] > dis[x] + edge[i].cost) {
					dis[y] = dis[x] + edge[i].cost;
					prev1[y] = x, record[y] = i;
					if (inq[y] == 0) {
						inq[y] = 1;
						if (Q.size() && dis[Q.front()] > dis[y]) Q.push_front(y);
						else Q.push_back(y);
					}
				}
			}
		}
		if (dis[t] == oo) break;
		flow = oo;
		for (x = t; x != s; x = prev1[x]) {
			int ri = record[x];
			flow = min(flow, edge[ri].cap);
		}
		for (x = t; x != s; x = prev1[x]) {
			int ri = record[x];
			edge[ri].cap -= flow;
			edge[ri ^ 1].cap += flow;
			edge[ri ^ 1].cost = -edge[ri].cost;
		}
		totflow += flow;
		mncost += dis[t] * flow;
	}
	return mncost;
}

int main() {
	int i, n, m, x, y, testcase;
	scanf("%d", &testcase);
	while (testcase--) {
		scanf("%d %d", &n, &m);
		memset(head, -1, sizeof(head));
		e = 0;
		int st = 2 * n, ed = st + 1, t1 = st + 2, t2 = st + 3;
		for (i = 0; i < n; i++) {
			addEdge(2 * i, 2 * i + 1, 1, -1);
			addEdge(t1, 2 * i, 1, 0);
			addEdge(2 * i + 1, t2, 1, 0);
		}
		addEdge(st, t1, 2, 0);
		addEdge(t2, ed, 2, 0);
		for (i = 0; i < m; i++) {
			scanf("%d %d", &x, &y);
			x--, y--;
			addEdge(2 * x + 1, 2 * y, 1, 0);
		}
		printf("%d\n", -mincost(st, ed));
	}
	return 0;
}
