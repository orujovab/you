#include <iostream>
#include <cstdio>
#include <algorithm>
#include <cmath>

#define eps 1e-8

using namespace std;

struct point
{
	double x, y, z;
	point() {}
	point(double xx, double yy, double zz) : x(xx), y(yy), z(zz) {}
	point operator -(const point p)
	{
		return point(x - p.x, y - p.y, z - p.z);
	}
	point operator +(const point p)
	{
		return point(x + p.x, y + p.y, z + p.z);
	}
	point operator *(const point p)
	{
		return point(y*p.z - z*p.y, z*p.x - x*p.z, x*p.y - y*p.x);
	}
	point operator *(double p)
	{
		return point(x*p, y*p, z*p);
	}
	point operator /(double p)
	{
		return point(x / p, y / p, z / p);
	}
	double operator ^(point p)
	{
		return x*p.x + y*p.y + z*p.z;
	}

};
struct node
{
	struct face
	{
		int a, b, c;
		bool ok;
	};
	int n, num, g[61][61];
	point tn[61];
	face F[486];
	double vlen(point a)
	{
		return sqrt(a.x*a.x + a.y*a.y + a.z*a.z);
	}
	point cross(const point &a, const point &b, const point &c)
	{
		return point((b.y - a.y)*(c.z - a.z) - (b.z - a.z)*(c.y - a.y),
			(b.z - a.z)*(c.x - a.x) - (b.x - a.x)*(c.z - a.z),
			(b.x - a.x)*(c.y - a.y) - (b.y - a.y)*(c.x - a.x));
	}
	double area(point a, point b, point c)
	{
		return vlen((b*a)*(c - a));
	}
	double volume(point a, point b, point c, point d)
	{
		return (b - a)*(c - a) ^ (d - a);
	}
	double dbcmp(point &p, face &f)
	{
		point m = tn[f.b] - tn[f.a];
		point n = tn[f.c] - tn[f.a];
		point t = p - tn[f.a];
		return (m*n) ^ t;
	}
	void deal(int p, int a, int b)
	{
		int f = g[a][b];
		face add;
		if (F[f].ok)
		{
			if (dbcmp(tn[p], F[f]) > eps) dfs(p, f);
			else
			{
				add.a = b;
				add.b = a;
				add.c = p;
				add.ok = true;
				g[p][b] = g[a][p] = g[b][a] = num;
				F[num++] = add;
			}
		}
	}
	void dfs(int p, int now)
	{
		F[now].ok = false;
		deal(p, F[now].b, F[now].a);
		deal(p, F[now].c, F[now].b);
		deal(p, F[now].a, F[now].c);
	}
	bool same(int s, int t)
	{
		point &a = tn[F[s].a];
		point &b = tn[F[s].b];
		point &c = tn[F[s].c];
		return fabs(volume(a, b, c, tn[F[t].a])) < eps &&
			fabs(volume(a, b, c, tn[F[t].b])) < eps &&
			fabs(volume(a, b, c, tn[F[t].c])) < eps;
	}
	void create()
	{
		int i, j, tmp;
		face add;
		num = 0;
		if (n < 4) return;
		bool flag = true;
		for (i = 1; i<n; i++)
		{
			if (vlen(tn[0] - tn[i]) > eps)
			{
				swap(tn[1], tn[i]);
				flag = false;
				break;
			}
		}
		if (flag) return;
		flag = true;
		for (i = 2; i<n; i++)
		{
			if (vlen((tn[0] - tn[1])*(tn[1] - tn[i])) > eps)
			{
				swap(tn[2], tn[i]);
				flag = false;
				break;
			}
		}
		if (flag) return;
		flag = true;
		for (i = 3; i<n; i++)
		{
			if (fabs((tn[0] - tn[1])*(tn[1] - tn[2]) ^ (tn[0] - tn[i])) >eps)
			{
				swap(tn[3], tn[i]);
				flag = false;
				break;
			}
		}
		if (flag) return;
		for (i = 0; i < 4; i++)
		{
			add.a = (i + 1) % 4;
			add.b = (i + 2) % 4;
			add.c = (i + 3) % 4;
			add.ok = true;
			if (dbcmp(tn[i], add) > 0) swap(add.b, add.c);
			g[add.a][add.b] = g[add.b][add.c] = g[add.c][add.a] = num;
			F[num++] = add;
		}
		for (i = 4; i < n; i++)
		{
			for (j = 0; j<num; j++)
			{
				if (F[j].ok && dbcmp(tn[i], F[j])>eps)
				{
					dfs(i, j);
					break;
				}
			}
		}
		tmp = num;
		for (i = num = 0; i < tmp; i++)
		{
			if (F[i].ok) F[num++] = F[i];
		}
	}
	double area()
	{
		double res = 0;
		if (n == 3)
		{
			point p = cross(tn[0], tn[1], tn[2]);
			res = vlen(p) / 2.0;
			return res;
		}
		for (int i = 0; i < num; i++) res += area(tn[F[i].a], tn[F[i].b], tn[F[i].c]);
		return res / 2.0;
	}
	double volume()
	{
		double res = 0;
		point tmp(0, 0, 0);
		for (int i = 0; i < num; i++) res += volume(tmp, tn[F[i].a], tn[F[i].b], tn[F[i].c]);
		return fabs(res / 6.0);
	}
	int triangle()
	{
		return num;
	}
	int polygon()
	{
		int i, j, res, flag;
		for (i = res = 0; i < num; i++)
		{
			flag = 1;
			for (j = 0; j < i; j++)
			{
				if (same(i, j))
				{
					flag = 0;
					break;
				}
			}
			res += flag;
		}
		return res;
	}
	point barycenter()
	{
		point ans(0, 0, 0), o(0, 0, 0);
		double all = 0;
		for (int i = 0; i < num; i++)
		{
			double vol = volume(o, tn[F[i].a], tn[F[i].b], tn[F[i].c]);
			ans = ans + (o + tn[F[i].a] + tn[F[i].b] + tn[F[i].c]) / 4.0*vol;
			all += vol;
		}
		ans = ans / all;
		return ans;
	}
	double ptoface(point p, int i)
	{
		return fabs(volume(tn[F[i].a], tn[F[i].b], tn[F[i].c], p) / vlen((tn[F[i].b] - tn[F[i].a])*(tn[F[i].c] - tn[F[i].a])));
	}
};
node ans;

int main()
{
	while (~scanf("%d", &ans.n))
	{
		for (int i = 0; i < ans.n; i++) scanf("%lf%lf%lf", &ans.tn[i].x, &ans.tn[i].y, &ans.tn[i].z);
		ans.create();
		point p = ans.barycenter();
		double answer1 = 1e20;
		for (int i = 0; i < ans.num; i++) answer1 = min(answer1, ans.ptoface(p, i));
		scanf("%d", &ans.n);
		for (int i = 0; i < ans.n; i++) scanf("%lf%lf%lf", &ans.tn[i].x, &ans.tn[i].y, &ans.tn[i].z);
		ans.create();
		p = ans.barycenter();
		double answer2 = 1e20;
		for (int i = 0; i < ans.num; i++) answer2 = min(answer2, ans.ptoface(p, i));
		printf("%.5lf\n", answer1 + answer2);
	}
	return 0;
}
