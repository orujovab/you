#include <iostream> 
#include <algorithm>

using namespace std;

#define SIZE 100000
#define INF 1000000000000000000

long n, k, a, b, mas[SIZE];

struct segment_tree
{
	long pos_left, pos_right, min, max;
	segment_tree *left, *right;
};

segment_tree* build(long L, long R)
{
	segment_tree *Tree = new segment_tree;
	if (L == R)
	{
		Tree->min = Tree->max = mas[L];
		Tree->pos_left = Tree->pos_right = L;
		Tree->left = Tree->right = NULL;
		return Tree;
	}
	int M = (L + R) / 2;
	Tree->left = build(L, M);
	Tree->right = build(M + 1, R);
	Tree->pos_left = L;
	Tree->pos_right = R;
	Tree->min = min(Tree->left->min, Tree->right->min);
	Tree->max = max(Tree->left->max, Tree->right->max);
	return Tree;
}

long minimum(segment_tree *Tree, long L, long R)
{
	if (L < Tree->pos_left) L = Tree->pos_left;
	if (R > Tree->pos_right) R = Tree->pos_right;
	if (L > R) return INF;
	if (Tree->pos_left == L && Tree->pos_right == R) return Tree->min;
	return min(minimum(Tree->left, L, R), minimum(Tree->right, L, R));
}

long maximum(segment_tree *Tree, long L, long R)
{
	if (L < Tree->pos_left) L = Tree->pos_left;
	if (R > Tree->pos_right) R = Tree->pos_right;
	if (L > R) return -INF;
	if (Tree->pos_left == L && Tree->pos_right == R) return Tree->max;
	return max(maximum(Tree->left, L, R), maximum(Tree->right, L, R));
}

void update(segment_tree *Tree, long position, long value)
{
	if (Tree->pos_left == Tree->pos_right)
	{
		Tree->min = Tree->max = value;
		return;
	}
	if (position < Tree->right->pos_left) update(Tree->left, position, value);
	else update(Tree->right, position, value);
	Tree->min = min(Tree->left->min, Tree->right->min);
	Tree->max = max(Tree->left->max, Tree->right->max);
}

int main()
{
	for (long i = 1; i <= SIZE; i++) mas[i - 1] = i*i % 12345 + i*i*i % 23456;
	segment_tree *Tree_main = new segment_tree;
	Tree_main = build(0, SIZE - 1);
	cin >> k;
	for (long i = 0; i < k; i++)
	{
		cin >> a >> b;
		if (a > 0) cout << maximum(Tree_main, a - 1, b - 1) - minimum(Tree_main, a - 1, b - 1) << endl;
		else if (a < 0) update(Tree_main, -a - 1, b);
	}
}
