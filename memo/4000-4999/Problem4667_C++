#include <iostream>
#include <algorithm>
#include <string.h>
#include <math.h>

using namespace std;

#define maxn 10001

int sa[maxn], c[maxn], t[maxn], t2[maxn];

void build_sa(int *s, int n, int m)
{
	int i, *x = t, *y = t2;
	for (i = 0; i < m; i++) c[i] = 0;
	for (i = 0; i < n; i++) c[x[i] = s[i]]++;
	for (i = 1; i < m; i++) c[i] += c[i - 1];
	for (i = n - 1; i >= 0; i--) sa[--c[x[i]]] = i;
	for (int k = 1; k <= n; k <<= 1)
	{
		int p = 0;
		for (i = n - k; i < n; i++) y[p++] = i;
		for (i = 0; i < n; i++) if (sa[i] >= k) y[p++] = sa[i] - k;
		for (i = 0; i < m; i++) c[i] = 0;
		for (i = 0; i < n; i++) c[x[y[i]]]++;
		for (i = 0; i < m; i++) c[i] += c[i - 1];
		for (i = n - 1; i >= 0; i--) sa[--c[x[y[i]]]] = y[i];
		swap(x, y);
		p = 1; x[sa[0]] = 0;
		for (i = 1; i < n; i++) x[sa[i]] = y[sa[i - 1]] == y[sa[i]] && y[sa[i - 1] + k] == y[sa[i] + k] ? p - 1 : p++;
		if (p >= n) break;
		m = p;
	}
}

int main()
{
	int str[maxn], height[maxn], Rank[maxn];
	char s[maxn];
	while (scanf("%s", s) != EOF)
	{
		int len = strlen(s);
		for (int i = 0; i < len; i++) str[i] = s[i] - 'a' + 2;
		str[len] = 0;
		build_sa(str, len + 1, 30);
		int i, k = 0;
		for (i = 0; i <= len; i++) Rank[sa[i]] = i;
		for (i = 0; i <= len; i++)
		{
			if (k) k--;
			int j = sa[Rank[i] - 1];
			while (str[i + k] == str[j + k]) k++;
			height[Rank[i]] = k;
		}
		int ans = 0, uz = 0;
		for (i = 1; i <= len; i++)
		{
			if (height[i] > uz)
			{
				int pos = i - 1, fuck, lcp = height[i];
				while (1)
				{
					fuck = min(abs(sa[i] - sa[pos]), lcp);
					if (lcp > uz)
					{
						if (fuck > uz)
						{
							ans += fuck - uz;
							uz = fuck;
						}
						pos--;
						if (pos == 0) break;
					}
					else break;
					lcp = min(lcp, height[pos + 1]);
				}
			}
			else uz = height[i];
		}
		printf("%d\n", ans);
	}
}
