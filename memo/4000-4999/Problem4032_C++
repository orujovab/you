#include <iostream>
#include <string.h>

using namespace std;

const int MAXN = 101;
int n, m, s, t, q[MAXN], v1[MAXN], v2[MAXN], g[MAXN][MAXN];
char s1[MAXN], s2[MAXN];

bool deal(int x, int y)
{
	while (x <= n) {
		if (s1[x] != s2[y]) return 0;
		x += m, y += m;
	}
	return 1;
}

void dfs(int t, int x, int s)
{
	if (x) v1[t] = s; else v2[t] = s;
	if (x)
	{
		for (int i = 1; i <= m; ++i)
			if (g[t][i] && !v2[i]) dfs(i, x ^ 1, s);
	}
	else
	{
		for (int i = 1; i <= m; ++i)
			if (g[i][t] && !v1[i]) dfs(i, x ^ 1, s);
	}
}

void work()
{
	long ans = 1;
	for (int i = 1; i <= m; ++i)
		if (!v1[i])
		{
			int x = 0, y = 0;
			dfs(i, 1, ++t);
			for (int j = 1; j <= m; ++j) x += v1[j] == t;
			for (int j = 1; j <= m; ++j) y += v2[j] == t;
			if (x != y) { puts("0"); return; }
			q[++s] = x;
		}

	for (int i = 1; i <= s; ++i)
		for (int j = 2; j <= q[i]; ++j) ans *= j;
	cout << ans << endl;
}

int main()
{
	while (cin >> m) {
		scanf("%s", s1 + 1);
		scanf("%s", s2 + 1);
		n = strlen(s1 + 1);
		memset(v1, 0, sizeof v1);
		memset(v2, 0, sizeof v2);
		t = s = 0;
		for (int i = 1; i <= m; ++i)
			for (int j = 1; j <= m; ++j) g[i][j] = deal(i, j);

		work();
	}
	return 0;
}
