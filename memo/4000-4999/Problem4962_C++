#include <iostream>
#include <vector>
#include <string.h>

using namespace std;

struct TwoSAT
{
	int n, c, S[1001];
	vector <int> G[2001];
	bool mark[1001];
	bool dfs(int x)
	{
		if (mark[x ^ 1]) return false;
		if (mark[x]) return true;
		mark[x] = true;
		S[c++] = x;
		for (int i = 0; i < G[x].size(); i++) if (!dfs(G[x][i])) return false;
		return true;
	}
	void init(int n)
	{
		this->n = n;
		for (int i = 0; i < n * 2; i++) G[i].clear();
		memset(mark, 0, sizeof mark);
	}
	//x = xval or y = yval
	void add_clause(int x, int xval, int y, int yval)
	{
		x = x * 2 + xval, y = y * 2 + yval;
		G[x ^ 1].push_back(y);
		G[y ^ 1].push_back(x);
	}
	bool solve()
	{
		for (int i = 0; i < n * 2; i += 2)
		{
			if (!mark[i] && !mark[i + 1])
			{
				c = 0;
				if (!dfs(i))
				{
					while (c > 0) mark[S[--c]] = false;
					if (!dfs(i + 1)) return false;
				}
			}
		}
		return true;
	}
};

TwoSAT answer;

int main()
{
	int n, a[1001], b[1001], c[1001];
	scanf("%d", &n);
	for (int i = 1; i <= n; i++) scanf("%d %d %d", &a[i], &b[i], &c[i]);
	answer.init(n);
	for (int i = 1; i <= n; i++)
	{
		for (int j = i + 1; j <= n; j++)
		{
			if (a[i] == a[j]) answer.add_clause(i - 1, 1, j - 1, 1);
			if (i == b[j] || a[i] == c[j]) answer.add_clause(i - 1, 1, j - 1, 0);
			if (j == b[i] || a[j] == c[i]) answer.add_clause(i - 1, 0, j - 1, 1);
			if (b[i] == b[j] || c[i] == c[j]) answer.add_clause(i - 1, 0, j - 1, 0);
		}
	}
	bool flag = answer.solve();
	if (flag)
	{
		for (int i = 0; i < n * 2; i += 2)
		{
			if (answer.mark[i]) printf("1");
			else printf("2");
			if (i != 2 * n - 2) printf(" ");
		}
	}
	return 0;
}
