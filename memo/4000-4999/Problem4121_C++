#include <iostream>
#include <string.h>

using namespace std;

const int MAXN = 101, MAXN2 = 40;
char sx[MAXN], sy[MAXN], st[MAXN];
int cnt = 0, fa, lenx, leny, A[MAXN], pan[MAXN2];


void RD(int &a)
{
	a = 0;
	char t;
	do t = getchar();
	while (t < '0' || t > '9');
	a = t - '0';
	while ((t = getchar()) >= '0' && t <= '9') a = a * 10 + (t - '0');
}

void OT(int a)
{
	if (a >= 10) OT(a / 10);
	putchar(a % 10 + '0');
}

int shu(char s)
{
	int t;
	if (s >= 'A' && s <= 'Z') t = s - 'A' + 10;
	else t = s - '0';
	return  t;
}

int val(char *s, int len)
{
	for (int i = 0; i < len; i++) if (shu(s[i]) > pan[i]) return 0;
	return 1;
}

char zf(int b)
{
	if (0 <= b && b <= 9) return b + '0';
	return b - 10 + 'A';
}

void print()
{
	if (A[35] != 0) puts("Invalid");
	else
	{
		if (fa == -1) putchar('-');
		int i;
		bool first = false;
		for (i = 34; i > 0; i--)
		{
			if (A[i] > 0 && !first) first = true;
			if (first) printf("%c", zf(A[i]));
		}
		printf("%d\n", A[0]);
	}
}

int comp(char *s1, int len1, char *s2, int len2)
{
	if (len1 < len2) return -1;
	if (len1 > len2) return 1;
	int i;
	for (i = len1 - 1; i >= 0; i--)
	{
		if (shu(sx[i]) > shu(sy[i])) return 1;
		if (shu(sx[i]) < shu(sy[i])) return -1;
	}
	return 0;
}

void SUB(char *s1, int len1, char * s2, int len2)
{
	cnt = 0;
	memset(A , 0 , sizeof A);
	int i, carry = 0;
	for (i = 0; i < len2; i++)
	{
		int t1 = shu(s1[i]) + carry;
		int t2 = shu(s2[i]);
		if (t1 >= t2)
		{
			A[cnt++] = t1 - t2;
			carry = 0;
		}
		else
		{
			t1 += pan[i] + 1;
			A[cnt++] = t1 - t2;
			carry = -1;
		}
	}
	for (i = len2; i < len1; i++)
	{
		int t1 = shu(s1[i]) + carry;
		int t2 = 0;
		if (t1 >= t2)
		{
			A[cnt++] = t1 - t2;
			carry = 0;
		}
		else
		{
			t1 += pan[i] + 1;
			A[cnt++] = t1 - t2;
			carry = -1;
		}
	}
}

void solve1()
{
	cnt = 0;
	memset(A , 0 , sizeof A);
	int carry = 0;
	if (lenx <= leny)
	{
		int i;
		for (i = 0; i < lenx; i++)
		{
			int tmp = shu(sx[i]) + shu(sy[i]) + carry;
			if (tmp > pan[i])
			{
				A[cnt++] = tmp % (pan[i] + 1);
				tmp /= pan[i] + 1;
				carry = tmp;
			}
			else
			{
				A[cnt++] = tmp;
				carry = 0;
			}
		}
		for (i = lenx; i < leny; i++)
		{
			int tmp = shu(sy[i]) + carry;
			if (tmp > pan[i])
			{
				A[cnt++] = tmp % (pan[i] + 1);
				tmp /= pan[i] + 1;
				carry = tmp;
			}
			else
			{
				A[cnt++] = tmp;
				carry = 0;
			}
		}
		if (carry > 0) A[cnt++] = carry;
	}
	else
	{
		int i;
		for (i = 0; i < leny; i++)
		{
			int tmp = shu(sx[i]) + shu(sy[i]) + carry;
			if (tmp > pan[i])
			{
				A[cnt++] = tmp % (pan[i] + 1);
				tmp /= pan[i] + 1;
				carry = tmp;
			}
			else
			{
				A[cnt++] = tmp;
				carry = 0;
			}
		}
		for (i = leny; i < lenx; i++)
		{
			int tmp = shu(sx[i]) + carry;
			if (tmp > pan[i])
			{
				A[cnt++] = tmp % (pan[i] + 1);
				tmp /= pan[i] + 1;
				carry = tmp;
			}
			else
			{
				A[cnt++] = tmp;
				carry = 0;
			}
		}
		if (carry > 0) A[cnt++] = carry;
	}
	print();
}

void solve2()
{
	int cmp = comp(sx, lenx, sy, leny);
	if (cmp == -1)  // sx < sy
	{
		SUB(sy, leny, sx, lenx);
		fa = -1;
		print();
	}
	else if (cmp == 0)
	{
		puts("0");
		fa = 1;
	}
	else
	{
		SUB(sx, lenx, sy, leny);
		fa = 1;
		print();
	}
}

void solve3()
{
	int cmp = comp(sx, lenx, sy, leny);
	if (cmp == -1)  // sx < sy
	{
		SUB(sy, leny, sx, lenx);
		fa = 1;
		print();
	}
	else if (cmp == 0)
	{
		puts("0");
		fa = 1;
	}
	else
	{
		SUB(sx, lenx, sy, leny);
		fa = -1;
		print();
	}
}

int main()
{
	int i, T, fx, fy;
	char op;
	for (i = 0; i < MAXN2; i++) pan[i] = i + 1;
	scanf("%d", &T);
	while (T--)
	{
		memset(sx , 0 , sizeof sx);
		memset(sy , 0 , sizeof sy);
		memset(st , 0 , sizeof st);
		scanf("%s", st);
		lenx = strlen(st);
		for (i = 0; i < lenx; i++) sx[i] = st[lenx - i - 1];
		if (st[0] == '-')
		{
			fx = -1;
			lenx--;
			sx[lenx] = '\0';
		}
		else fx = 1;
		cin >> op;
		scanf("%s", st);
		leny = strlen(st);
		for (i = 0; i < leny; i++) sy[i] = st[leny - i - 1];
		if (st[0] == '-')
		{
			fy = -1;
			leny--;
			sy[leny] = '\0';
		}
		else fy = 1;
		//solve();
		if (!val(sx, lenx) || !val(sx, leny)) puts("Invalid");
		else
		{
			memset(A, 0, sizeof A);
			if (fx == 1 && fy == 1)
			{
				if (op == '+')
				{
					fa = 1;
					solve1();
				}
				else solve2();
			}
			if (fx == 1 && fy == -1)
			{
				if (op == '+') solve2();
				else
				{
					fa = 1;
					solve1();
				}
			}
			if (fx == -1 && fy == 1)
			{
				if (op == '+') solve3();
				else
				{
					fa = -1;
					solve1();
				}
			}
			if (fx == -1 && fy == -1)
			{
				if (op == '+')
				{
					fa = -1;
					solve1();
				}
				else solve3();
			}
		}
	}
	return 0;
}
