#include <iostream> 
#include <string.h> 

using namespace std;

int fat[150001], vis[150001], dis[150001], res[75001][3];

typedef struct node{
	int v, d;
	struct node *nxt;
} NODE;

NODE *Link1[150001], *Link2[150001], edg1[300001], edg2[300001];

void Add(int u, int v, int d, NODE edg[], NODE *Link[], int &idx){
	edg[idx].v = v, edg[idx].d = d;
	edg[idx].nxt = Link[u];
	Link[u] = edg + idx++;
	edg[idx].v = u, edg[idx].d = d;
	edg[idx].nxt = Link[v];
	Link[v] = edg + idx++;
}

int find(int x){
	if (x != fat[x]) return fat[x] = find(fat[x]);
	return x;
}

void Tarjan(int u){
	vis[u] = 1;
	fat[u] = u;
	NODE *p;
	for (p = Link2[u]; p; p = p->nxt) if (vis[p->v]) res[p->d][2] = find(p->v);
	for (p = Link1[u]; p; p = p->nxt){
		if (!vis[p->v]){
			dis[p->v] = dis[u] + p->d;
			Tarjan(p->v);
			fat[p->v] = u;
		}
	}
}

int main() {
	int N, M, i, u, v, d, idx1, idx2;
	scanf("%d", &N);
	idx1 = 0;
	memset(Link1, 0, sizeof Link1);
	for (i = 1; i < N; i++){
		scanf("%d%d%d", &u, &v, &d);
		Add(u, v, d, edg1, Link1, idx1);
	}
	scanf("%d", &M);
	idx2 = 0;
	memset(Link2, 0, sizeof Link2);
	for (i = 1; i <= M; i++){
		scanf("%d%d", &u, &v);
		Add(u, v, i, edg2, Link2, idx2);
		res[i][0] = u;
		res[i][1] = v;
	}
	memset(vis, 0, sizeof vis);
	dis[1] = 0;
	Tarjan(1);
	for (i = 1; i <= M; i++) printf("%d\n", dis[res[i][0]] + dis[res[i][1]] - 2 * dis[res[i][2]]);
	return 0;
}
