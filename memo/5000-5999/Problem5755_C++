#include <iostream>
#include <string.h>
#include <algorithm>

using namespace std;

const int maxn = 20001;
int n, sz, ans, loc[1001], dis[maxn], cnt[maxn], hk[maxn];

int Bisearch(int left, int right, int x)
{
	int mid = (left + right) >> 1;
	while (left <= right)
	{
		if (dis[mid] == x) return mid;
		if (dis[mid] < x) left = mid + 1;
		else right = mid - 1;
		mid = (left + right) >> 1;
	}
	return -1;
}

bool dfs(int cur, int rest, int node_cnt)
{
	if (rest == 0)
	{
		ans = loc[0];
		for (int i = 1; i < node_cnt; ++i) ans *= loc[i] - loc[i - 1];
		return true;
	}
	if (cur > n) return false;
	int x = hk[cur];
	bool ok = true;
	loc[node_cnt++] = dis[x], --cnt[x];
	int *stk = new int[node_cnt + 10];
	if (cnt[x] < 0 || node_cnt > 1 && loc[node_cnt - 2] == dis[x]) ok = false;
	int top = 0;
	for (int i = 0; i < node_cnt - 1 && ok; ++i)
	{
		int dif = loc[node_cnt - 1] - loc[i];
		int p = Bisearch(0, sz - 1, dif);
		if (cnt[p] == 0) ok = false;
		stk[top++] = p;
	}
	if (ok)
	{
		for (int i = 0; i < top; ++i) --cnt[stk[i]];
		if (dfs(cur + 1, rest - node_cnt, node_cnt))
		{
			delete[]  stk;
			return true;
		}
		for (int i = 0; i < top; ++i) ++cnt[stk[i]];
	}
	delete[] stk;
	--node_cnt, ++cnt[x];
	if (dfs(cur + 1, rest, node_cnt)) return true;
	return false;
}

int main()
{
	while (scanf("%d", &n) == 1)
	{
		sz = 0;
		ans = 1;
		memset(cnt, 0, sizeof cnt);
		int x;
		for (int i = 0; i < n; ++i)
		{
			scanf("%d", &x);
			if (sz == 0 || dis[sz - 1] != x)
			{
				dis[sz] = x;
				cnt[sz++]++;
			}
			else ++cnt[sz - 1];
			hk[i] = sz - 1;
		}
		if (dfs(0, n, 0)) printf("%d\n", ans);
		else printf("No solution\n");
	}
}
