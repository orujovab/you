#include <iostream>
#include <map>
#include <set>
#include <algorithm>
#include <string.h>

using namespace std;

#define maxn 600001

int sa[maxn], belong[maxn], rank1[maxn], height[maxn];
int wa[maxn], wb[maxn], wv[maxn], Ws[maxn];
set <long> S;

int cmp(int *r, int a, int b, int l)
{
	return r[a] == r[b] && r[a + l] == r[b + l];
}

void da(int *r, int *sa, int n, int m)
{
	int *x = wa, *y = wb, *t, i, j, p;
	for (i = 0; i < m; i++) Ws[i] = 0;
	for (i = 0; i < n; i++) Ws[x[i] = r[i]]++;
	for (i = 1; i < m; i++) Ws[i] += Ws[i - 1];
	for (i = n - 1; i >= 0; i--) sa[--Ws[x[i]]] = i;
	for (j = 1, p = 1; p < n; j *= 2, m = p)
	{
		for (p = 0, i = n - j; i < n; i++) y[p++] = i;
		for (i = 0; i < n; i++) if (sa[i] >= j) y[p++] = sa[i] - j;
		for (i = 0; i < n; i++) wv[i] = x[y[i]];
		for (i = 0; i < m; i++) Ws[i] = 0;
		for (i = 0; i < n; i++) Ws[wv[i]]++;
		for (i = 1; i < m; i++) Ws[i] += Ws[i - 1];
		for (i = n - 1; i >= 0; i--) sa[--Ws[wv[i]]] = y[i];
		for (t = x, x = y, y = t, p = 1, x[sa[0]] = 0, i = 1; i < n; i++) x[sa[i]] = cmp(y, sa[i - 1], sa[i], j) ? p - 1 : p++;
	}
}

void calheight(int *r, int *sa, int n)
{
	int i, j, k = 0;
	for (i = 1; i <= n; i++) rank1[sa[i]] = i;
	for (i = 0; i < n; height[rank1[i++]] = k)
		for (k ? k-- : 0, j = sa[rank1[i] - 1]; r[i + k] == r[j + k]; k++);
}

void dfs(int L, int R, int h)
{
	int i = L;
	while (i <= R)
	{
		while (i <= R && height[i] == h) i++;
		if (i > R) break;
		int j = i;
		long pos = 1L << belong[sa[i - 1]];
		int pre = height[i];
		while (j <= R && height[j] > h) pos |= 1L << belong[sa[j]], pre = min(pre, height[j]), j++;
		S.insert(pos);
		dfs(i, j - 1, pre);
		i = j;
	}
}

int main()
{
	int F, N, L[66], s[maxn];
	char in[maxn];
	bool single[66];
	while (scanf("%d", &F), F)
	{
		N = 0;
		memset(belong, 0, sizeof belong);
		for (int i = 1; i <= F; i++)
		{
			scanf("%s", in);
			int tlen = strlen(in);
			L[i] = tlen;
			for (int j = 0; j < tlen; j++)
			{
				belong[N] = i;
				s[N++] = in[j] - 'a' + 1;
			}
			belong[N] = -1;
			s[N++] = 26 + i;
		}
		s[--N] = 0;
		da(s, sa, N + 1, 90);
		calheight(s, sa, N);
		//solve();
		S.clear();
		memset(single, 0, sizeof single);
		for (int i = 1; i <= N; i++)
		{
			if (belong[sa[i - 1]] != -1 && L[belong[sa[i - 1]]] == height[i]) single[belong[sa[i - 1]]] = 1;
			if (belong[sa[i]] != -1 && L[belong[sa[i]]] == height[i]) single[belong[sa[i]]] = 1;
		}
		for (int i = 1; i <= F; i++) if (!single[i]) S.insert(1L << i);
		dfs(1, N, 0);
		printf("%d\n", S.size());
	}
	return 0;
}
