#include <stdio.h>   
#include <algorithm> 

using namespace std;

const int maxn = 1001;

bool flag[maxn];
int t, tf = 0, totf = 0, prime[maxn];
int pri[] = { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29 };
long ans, k, prifac[100], prifaccnt[100];
long fac[100000];

long powMod(long a, long b, long m){
	long r = 1l, d = a;
	while (b){
		if (b & 1l){
			r *= d;
			r %= m;
		}
		d *= d;
		d %= m;
		b >>= 1;
	}
	return r;
}

bool isPrime(long x){
	if (x < 2l) return false;
	if (x == 2l) return true;
	if (!(x & 1l)) return false;
	long kk = 0, i, j, m, a;
	m = x - 1l;
	while ((m & 1l) == 0){
		m >>= 1;
		kk += 1;
	}
	for (i = 0; i < 10; i++){
		if (pri[i] >= x) return true;
		a = powMod(pri[i], m, x);
		if (a == 1l) continue;
		for (j = 0; j < kk; j++){
			if (a == x - 1l) break;
			a *= a;
			a %= x;
		}
		if (j < kk) continue;
		return false;
	}
	return true;
}

void  getfac_prepare(long x){
	for (int i = 0; i < t; i++){
		if (x < prime[i]) break;
		if (x%prime[i] == 0){
			prifac[totf] = prime[i];
			while (x%prime[i] == 0){
				x /= prime[i];
				prifaccnt[totf]++;
			}
			totf++;
		}
	}
	if (x != 1l)
	{
		prifaccnt[totf] = 1;
		prifac[totf++] = x;
	}
}

void getfac(int pos, int x){
	fac[tf++] = x;
	if (pos >= totf) return;
	long cur = x;
	for (int i = 0; i < prifaccnt[pos] + 1; i++){
		getfac(pos + 1, cur);
		cur *= prifac[pos];
	}
}

void dfs(int pos, long k, long n){
	if (n >= ans || n*k >= ans * 2l) return;
	if (k == 1l){
		ans = n; return;
	}
	if (pos < 0) return;
	if (k%fac[pos] == 0){
		long tmpk = k / fac[pos];
		long tmpn = n*(fac[pos] + 1l);
		while (tmpk % (fac[pos] + 1l) == 0){
			tmpk /= fac[pos] + 1l;
			tmpn *= fac[pos] + 1l;
		}
		dfs(pos - 1, tmpk, tmpn);
	}
	dfs(pos - 1, k, n);
}

int main(){
	int i, j, n = maxn;
	t = 0;
	for (i = 2; i <= n; ++i) {
		if (!flag[i]) prime[t++] = i;
		for (j = 0; j < t&&i*prime[j] <= n; ++j){
			flag[i*prime[j]] = 1;
			if (i%prime[j] == 0) break;
		}
	}
	while (scanf("%ld", &k) != EOF){
		totf = 0;
		getfac_prepare(k);
		tf = 0;
		getfac(0, 1);
		int totprif = 0;
		for (i = 0; i < tf; i++){
			if (isPrime(fac[i] + 1l)) fac[totprif++] = fac[i];
		}
		sort(fac, fac + totprif);
		totprif = unique(fac, fac + totprif) - fac;
		ans = 1l << 60;
		dfs(totprif - 1, k, 1);
		if (ans < 1l << 60) printf("%ld\n", ans);
		else printf("0\n");
	}
	return 0;
}
