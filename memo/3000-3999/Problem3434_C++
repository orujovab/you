#include <iostream>
#include <vector>
#include <algorithm>
#include <string.h>

using namespace std;

void mymin(int &a, int b){
	if (a == -1) a = b;
	else a = min(a, b);
}

int main(){
	int N, tail[16][16], dp[16384][16];
	string inp[16];
	vector<string> names;
	while (cin >> N && N)
	{
		for (int i = 0; i < N; i++) cin >> inp[i];
		bool use[16];
		memset(use, -1, sizeof(use));
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if (i != j && use[j] && inp[j].find(inp[i]) != string::npos) use[i] = 0;

		names.clear();
		for (int i = 0; i < N; i++) if (use[i]) names.push_back(inp[i]);
		N = names.size();
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				if (i != j){
					int n = names[i].size(), m = names[j].size();
					for (int k = min(n, m); k >= 0; k--)
						if (names[i].substr(n - k, k) == names[j].substr(0, k)) { tail[i][j] = m - k; break; }
				}

		memset(dp, -1, sizeof(dp));
		for (int i = 0; i < N; i++) dp[1 << i][i] = names[i].size();
		for (int S = 0; S < 1 << N; S++)
			for (int u = 0; u < N; u++)
				if (S & 1 << u)
					for (int v = 0; v < N; v++)
						if (!(S & 1 << v)) mymin(dp[S | 1 << v][v], dp[S][u] + tail[u][v]);

		int ans = 1e9;
		for (int i = 0; i < N; i++) mymin(ans, dp[(1 << N) - 1][i]);
		cout << ans << endl;
	}
	return 0;
}
