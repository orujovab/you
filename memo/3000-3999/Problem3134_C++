#include <algorithm>
#include <iostream>

using namespace std;

struct node
{
	double x, y, left, right;
} Map[105];

bool cmp(node a, node b)
{
	if (a.left == b.left) return a.right < b.right;
	return a.left < b.left;
}

double solve(double a)
{
	if (a < 0) return 0;
	if (a > 1) return 1;
	return a;
}

double cos(double a, double b)
{
	return (a - b)*(a - b);
}

int main()
{
	int n, i;
	double a, b, c, d, x, y, r, bi1, bi2, cx0, cy0, cx1, cy1;
	while (cin >> n&&n)
	{
		cin >> cx0 >> cy0 >> cx1 >> cy1;
		int res = 0;
		for (i = 0; i < n; i++){
			cin >> x >> y >> r;
			a = cos(cx1, cx0) + cos(cy1, cy0);
			b = 2 * ((cx0 - x)*(cx1 - cx0) + (cy0 - y)*(cy1 - cy0));
			c = cos(cx0, x) + cos(cy0, y) - r*r;
			d = b*b - 4 * a*c;
			if (d <= 0) continue;
			bi1 = solve((-b + sqrt(d)) / (2 * a));
			bi2 = solve((-b - sqrt(d)) / (2 * a));
			if (bi2 < bi1) swap(bi1, bi2);
			Map[res].left = bi1;
			Map[res++].right = bi2;
		}
		if (res == 0){
			cout << "0.00" << endl;
			continue;
		}
		sort(Map, Map + res, cmp);
		double ans = 0, bi3 = Map[0].left, bi2 = Map[0].right;
		for (i = 1; i<res; i++) {
			if (Map[i].left>bi2){
				ans += bi2 - bi3;
				bi3 = Map[i].left;
				bi2 = Map[i].right;
			}
			else bi2 = max(bi2, Map[i].right);
		}
		ans += bi2 - bi3;
		printf("%.2f\n", ans * 100);
	}
	return 0;
}
