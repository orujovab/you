#include <cstdio>
#include <iostream>
#include <cmath>

using namespace std;

const double eps = 1e-5;

long long s1[6], s2[6], s[10];
double a1[6], a2[6], ag[10];


long long dis(long long a, long long b)
{
	return a*a + b*b;
}

double angle(long long a, long long b, long long c)
{
	return acos((a + b - c) / (2 * sqrt(a*b)));
}

int scs(long long a, long long b, long long c, long long d, double e, double f)
{
	for (int i = 0; i < 4; i++)
	{
		if (s[i] == a && s[i + 1] == b && s[i + 2] == c && s[i + 3] == d && fabs(e - ag[i]) < eps && fabs(f - ag[i + 2]) < eps) return 1;
	}
	return 0;
}

int scs2(long long a, double b, long long c, double e, double f, int choose)
{
	if (choose)
	{
		for (int i = 0; i < 4; i++)
		{
			if (s[i] == a && fabs(sqrt(s[i + 1]) + sqrt(s[i + 2]) - b) < eps && s[i + 3] == c && fabs(e - ag[i]) < eps && fabs(f - ag[i + 2]) < eps) return 1;
			if (s[i] == c && fabs(sqrt(s[i + 1]) + sqrt(s[i + 2]) - b) < eps && s[i + 3] == a && fabs(f - ag[i]) < eps && fabs(e - ag[i + 2]) < eps) return 1;
		}
	}
	else
	{
		for (int i = 0; i < 4; i++)
		{
			if (s[i] == a && fabs(sqrt(s[i + 1]) - b) < eps && s[i + 2] == c && fabs(e - ag[i]) < eps && fabs(f - ag[i + 1]) < eps) return 1;
			if (s[i] == c && fabs(sqrt(s[i + 1]) - b) < eps && s[i + 2] == a && fabs(f - ag[i]) < eps && fabs(e - ag[i + 1]) < eps) return 1;
		}
	}
	return 0;
}

int pd()
{
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			if (s1[i] == s2[j])
			{
				if (scs(s1[i + 1], s1[i + 2], s2[j + 1], s2[j + 2], a1[i], a2[j])) return 1;
				if (scs(s1[i + 1], s1[i + 2], s2[j + 2], s2[j + 1], a1[i], a2[j])) return 1;
				if (scs(s1[i + 2], s1[i + 1], s2[j + 1], s2[j + 2], a1[i], a2[j])) return 1;
				if (scs(s1[i + 2], s1[i + 1], s2[j + 2], s2[j + 1], a1[i], a2[j])) return 1;
			}
			if (fabs(a1[i] + a2[j] - acos(-1)) < eps)
			{
				if (scs2(s1[i], sqrt(s1[i + 1]) + sqrt(s2[j + 1]), s2[j], a1[i + 2], a2[j + 2], s1[i + 2] == s2[j + 2])) return 1;
				if (scs2(s1[i], sqrt(s1[i + 1]) + sqrt(s2[j + 2]), s2[j], a1[i + 2], a2[j + 1], s1[i + 2] == s2[j + 1])) return 1;
				if (scs2(s1[i], sqrt(s1[i + 2]) + sqrt(s2[j + 1]), s2[j], a1[i + 1], a2[j + 2], s1[i + 1] == s2[j + 2])) return 1;
				if (scs2(s1[i], sqrt(s1[i + 2]) + sqrt(s2[j + 2]), s2[j], a1[i + 1], a2[j + 1], s1[i + 1] == s2[j + 1])) return 1;
			}
		}
	}
	return 0;
}

int main()
{
	int t; cin >> t;
	long long X1, X2, X3, X4, Y1, Y2, Y3, Y4;
	for (int cas = 1; cas <= t; cas++)
	{
		cin >> X1 >> Y1; cin >> X2 >> Y2; cin >> X3 >> Y3;
		s1[0] = s1[3] = dis(X1 - X2, Y1 - Y2);
		s1[1] = s1[4] = dis(X2 - X3, Y2 - Y3);
		s1[2] = s1[5] = dis(X3 - X1, Y3 - Y1);
		a1[0] = a1[3] = angle(s1[2], s1[1], s1[0]);
		a1[1] = a1[4] = angle(s1[2], s1[3], s1[1]);
		a1[2] = a1[5] = angle(s1[1], s1[3], s1[2]);
		cin >> X1 >> Y1; cin >> X2 >> Y2; cin >> X3 >> Y3;
		s2[0] = s2[3] = dis(X1 - X2, Y1 - Y2);
		s2[1] = s2[4] = dis(X2 - X3, Y2 - Y3);
		s2[2] = s2[5] = dis(X3 - X1, Y3 - Y1);
		a2[0] = a2[3] = angle(s2[2], s2[1], s2[0]);
		a2[1] = a2[4] = angle(s2[2], s2[3], s2[1]);
		a2[2] = a2[5] = angle(s2[1], s2[3], s2[2]);
		cin >> X1 >> Y1; cin >> X2 >> Y2; cin >> X3 >> Y3; cin >> X4 >> Y4;
		s[0] = s[4] = dis(X1 - X2, Y1 - Y2);
		s[1] = s[5] = dis(X2 - X3, Y2 - Y3);
		s[2] = s[6] = dis(X3 - X4, Y3 - Y4);
		s[3] = s[7] = dis(X4 - X1, Y4 - Y1);
		ag[0] = ag[4] = angle(s[0], s[1], dis(X1 - X3, Y1 - Y3));
		ag[1] = ag[5] = angle(s[1], s[2], dis(X2 - X4, Y2 - Y4));
		ag[2] = ag[6] = angle(s[2], s[3], dis(X1 - X3, Y1 - Y3));
		ag[3] = ag[7] = angle(s[3], s[0], dis(X2 - X4, Y2 - Y4));
		if (pd()) cout << "Case #" << cas << ": Yes" << endl;
		else cout << "Case #" << cas << ": No" << endl;
	}
	return 0;
}
