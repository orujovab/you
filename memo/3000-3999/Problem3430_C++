#include <iostream>
#include <string.h>
#include <set>

using namespace std;

set<long long> se;
const int dir[8][2] = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 }, { 1, 1 }, { 1, -1 }, { -1, 1 }, { -1, -1 } };
int len, n = 10, m = 20;
bool vi[10][20];
char str[300], best[300], ma[20][30];

void dfs(int x, int y, int i, int h, long long pre)
{
	str[h] = ma[x][y];
	str[h + 1] = '\0';
	pre = pre * 131 + ma[x][y];
	if (h > 0 && se.find(pre) != se.end())
	{
		if (h + 1 > len) strcpy(best, str), len = h + 1;
		else if (h + 1 == len && strcmp(best, str) > 0) strcpy(best, str);
	}
	se.insert(pre);
	vi[x][y] = 1;
	int tx = (x + dir[i][0] + n) % n, ty = (y + dir[i][1] + m) % m;
	if (!vi[tx][ty]) vi[tx][ty] = 1, dfs(tx, ty, i, h + 1, pre);
	vi[x][y] = 0;
}

int main()
{
	while (scanf("%d%d", &n, &m) && n&&m)
	{
		se.clear();
		for (int i = 0; i < n; ++i) scanf("%s", ma[i]);
		len = 0;
		strcpy(best, "");
		memset(vi, 0, sizeof(vi));
		for (int i = 0; i < n; ++i)
			for (int j = 0; j < m; ++j)
				for (int k = 0; k < 8; ++k) dfs(i, j, k, 0, 0);

		if (len > 0) printf("%s\n", best);
		else printf("0\n");
	}
	return 0;
}
