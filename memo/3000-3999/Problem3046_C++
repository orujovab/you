#include <iostream>
#include <cstdio>
#include <cstring>
#include <vector>
#include <cmath>
#include <queue>

using namespace std;

const int maxn = 31010;
const double INF = 100000000000000000.0;
vector<pair<int, int> > is_d;
int N;

struct Point
{
	int x, y, z;
}p[maxn];

struct A
{
	int s, e, d;
} E[maxn];

double dis1[maxn], dis2[maxn];

struct node
{
	int v, next;
	double f;
} edge1[maxn * 2], edge2[maxn * 2];

void add_edge(node *edge, int &num, int x, int y, double f, int *head)
{
	edge[num].v = y;
	edge[num].next = head[x];
	edge[num].f = f;
	head[x] = num++;
}

void SPFA(int s, double *dis, int *head, node *edge)
{
	bool vis[maxn];
	for (int i = 0; i <= N; i++)
	{
		dis[i] = INF;
		vis[i] = 0;
	}
	queue<int> q;
	q.push(s);
	vis[s] = 1;
	dis[s] = 0;
	while (!q.empty())
	{
		int u = q.front(); q.pop();
		vis[u] = 0;
		for (int i = head[u]; i != -1; i = edge[i].next)
		{
			int v = edge[i].v;
			double w = edge[i].f;
			if (dis[v] > dis[u] + w)
			{
				dis[v] = dis[u] + w;
				if (!vis[v])
				{
					q.push(v);
					vis[v] = 1;
				}
			}
		}
	}
}

double cal(int a, int b)
{
	int x = p[a].x - p[b].x, y = p[a].y - p[b].y, z = p[a].z - p[b].z;
	double len = x*x + y*y + z*z;
	len = sqrt(len);
	return len;
}

bool solve()
{
	double ans = INF;
	int n = is_d.size();
	for (int i = 0; i < n; i++)
	{

		int x = is_d[i].first;
		int y = is_d[i].second;
		double len = cal(x, y);
		if (dis1[x] < INF && dis2[y] < INF && dis1[x] + dis2[y] + len < ans) ans = dis1[x] + dis2[y] + len;
	}
	if (fabs(ans - INF) < 1e-6) return false;
	printf("%.3lf\n", ans);
	return true;
}

int cald(int a, int b)
{
	if (p[a].z >= p[b].z) return 0;
	double len = (p[a].x - p[b].x)*(p[a].x - p[b].x) + (p[a].y - p[b].y)*(p[a].y - p[b].y);
	len = sqrt(len);
	return int((p[b].z - p[a].z)*100.0 / len);
}

int main()
{
	int M, S, T, D, num1, num2, head1[maxn], head2[maxn];
	while (scanf("%d%d", &N, &M) != EOF, N || M)
	{
		num1 = num2 = 0;
		memset(head1, -1, sizeof(head1));
		memset(head2, -1, sizeof(head2));
		is_d.clear();
		for (int i = 1; i <= N; i++) scanf("%d%d%d", &p[i].x, &p[i].y, &p[i].z);
		for (int i = 1; i <= M; i++) scanf("%d%d", &E[i].s, &E[i].e);
		scanf("%d%d%d", &S, &T, &D);
		for (int i = 1; i <= M; i++)
		{
			int a = E[i].s, b = E[i].e;
			int d1 = cald(a, b), d2 = cald(b, a);
			double tmp = cal(E[i].s, E[i].e);
			if (d1 <= D)
			{
				add_edge(edge1, num1, E[i].s, E[i].e, tmp, head1);
				add_edge(edge2, num2, E[i].e, E[i].s, tmp, head2);
			}
			if (d2 <= D)
			{
				add_edge(edge1, num1, E[i].e, E[i].s, tmp, head1);
				add_edge(edge2, num2, E[i].s, E[i].e, tmp, head2);
			}
			if (d1 == D)is_d.push_back(make_pair(a, b));
			if (d2 == D)is_d.push_back(make_pair(b, a));
		}
		if (is_d.size() < 1) { printf("None\n"); continue; }
		SPFA(S, dis1, head1, edge1);
		SPFA(T, dis2, head2, edge2);
		if (!solve()) printf("None\n");
	}
	return 0;
}
