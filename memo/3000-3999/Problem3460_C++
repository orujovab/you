#include <iostream>
#include <stdio.h>
#include <string.h>
#include <algorithm>

using namespace std;

int get_min(int a, int b, int c)
{
	int ans = 0x3fffffff;
	if (a != -1) ans = min(ans, a);
	if (b != -1) ans = min(ans, b);
	if (c != -1) ans = min(ans, c);
	if (ans != 0x3fffffff) return ans;
	return -1;
}

int main()
{
	int n, t[50], p[50], f[50][4];
	while (scanf("%d", &n), n != 0)
	{
		for (int i = 0; i < n; i++) scanf("%d%d", &p[i], &t[i]);
		memset(f, -1, sizeof f);
		if (p[0] <= t[0]) f[0][1] = p[0];
		for (int i = 1; i < n; i++)
		{
			int Min = 0x3fffffff;
			if (f[i - 1][1] != -1 && p[i] + p[i - 1] * 2 <= t[i] - t[i - 1]) Min = min(Min, f[i - 1][1] + p[i] + p[i - 1]);
			if (f[i - 1][2] != -1 && p[i] + p[i - 1] * 3 <= t[i] - t[i - 1]) Min = min(Min, f[i - 1][2] + p[i] + p[i - 1]);
			if (f[i - 1][3] != -1 && p[i] + p[i - 1] * 4 <= t[i] - t[i - 1]) Min = min(Min, f[i - 1][3] + p[i] + p[i - 1]);
			if (Min != 0x3ffffff) f[i][1] = Min;
			if (f[i - 1][1] != -1 && t[i] - t[i - 1] >= abs(p[i] - p[i - 1]) * 2) f[i][2] = f[i - 1][1] + abs(p[i] - p[i - 1]);
			if (f[i - 1][2] != -1 && t[i] - t[i - 1] >= abs(p[i] - p[i - 1]) * 3) f[i][3] = f[i - 1][2] + abs(p[i] - p[i - 1]);
		}
		int ans = get_min(f[n - 1][1], f[n - 1][2], f[n - 1][3]);
		if (ans == -1)
		{
			printf("NG");
			int pos = 0;
			for (int i = 0; i < n; i++) if (get_min(f[i][1], f[i][2], f[i][3]) == -1)
			{
				pos = i;
				break;
			}
			printf(" %d\n", pos + 1);
		}
		else printf("OK %d\n", ans + p[n - 1]);
	}
	return 0;
}
