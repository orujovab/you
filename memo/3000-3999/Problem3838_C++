#include <iostream>
#include <math.h>
#include <algorithm>

using namespace std;

#define MAX 100001

int b[MAX][20];

void make(int n)
{
	int k = (int)(log(n) / log(2.0));
	for (int j = 1; j <= k; j++){
		for (int i = 1; i <= n - (1 << j) + 1; i++) b[i][j] = max(b[i][j - 1], b[i + (1 << (j - 1))][j - 1]);
	}
}

int search(int i, int j)
{
	int k = (int)(log(j - i + 1) / log(2.0));
	return max(b[i][k], b[j - (1 << k) + 1][k]);
}

int main()
{
	int n, q, x, y, k, a[MAX], c[MAX];
	while (scanf("%d", &n), n > 0){
		scanf("%d", &q);
		for (int i = 1; i <= n; i++) scanf("%d", &a[i]);
		b[1][0] = 1, x = a[1], k = 1;
		for (int i = 2; i <= n; i++){
			if (x == a[i]) b[k][0]++;
			else
			{
				b[++k][0] = 1;
				x = a[i];
			}
		}
		make(k);
		c[0] = 0;
		for (int i = 1; i <= k; i++) c[i] = c[i - 1] + b[i][0];
		c[++k] = 100001;
		for (int i = 0; i < q; i++){
			scanf("%d%d", &x, &y);
			int tempi = lower_bound(c, c + k + 1, x - 1) - c + 1;
			int tempj = lower_bound(c, c + k + 1, y + 1) - c - 1;
			if (tempi > tempj + 1) printf("%d\n", y - x + 1);
			else if (tempi == tempj + 1) printf("%d\n", max(c[tempj] - x + 1, y - c[tempj]));
			else
			{
				int max1 = search(tempi, tempj);
				max1 = max(max1, c[tempi - 1] - x + 1);
				max1 = max(max1, y - c[tempj]);
				printf("%d\n", max1);
			}
		}
	}
}
