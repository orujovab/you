#include <algorithm>

using namespace std;

int M, N, P, gc[20], gr[20];

struct vert {
	int n, x;
	bool operator<(const vert v) const { return x < v.x; }
} v[40];

struct horz {
	int n, y; bool out;
	bool operator<(const horz h) const { return y < h.y || y == h.y && out < h.out; }
} h[40];

int do_rectangles(int p, int MINR, int MAXR, int MAXC, int &GC){
	int b, k = 0, l, r, t;
	for (int i = 0; i < P; ++i){
		b = max(MINR, gr[i] - p);
		l = max(0, gc[i] - p - 1);
		r = min(MAXC, gc[i] + p);
		t = min(MAXR, gr[i] + p);
		if (gc[i] <= MAXC && gr[i] >= MINR && gr[i] <= MAXR) ++GC;
		if (t < MINR || b > MAXR || l > MAXC) continue;
		v[k].n = i; v[k].x = l;
		h[k].n = i; h[k].y = b; h[k++].out = 0;
		v[k].n = i; v[k].x = r;
		h[k].n = i; h[k].y = t; h[k++].out = 1;
	}
	sort(v, v + k);
	sort(h, h + k);
	return k;
}

long area(int p, int MINR, int MAXR, int MAXC){
	int GC = 0, length, start = 0, xact = 0, yact = 0;
	int K = do_rectangles(p, MINR, MAXR, MAXC, GC);
	long ret = 0, diff;
	for (int i = 0; i < K; ++i){
		if (i && v[i].x != v[i - 1].x){
			length = 0;
			for (int j = 0; j < K; ++j){
				if (!(xact & 1 << h[j].n)) continue;
				if (!yact) start = h[j].y;
				yact ^= 1 << h[j].n;
				if (!yact) length += h[j].y - start + 1;
			}
			diff = v[i].x - v[i - 1].x;
			ret += diff * length;
		}
		xact ^= 1 << v[i].n;
	}
	return max(0L, ret - GC);
}

int bin_search(int LIM, long key, int type, int p = 0, int l = 0){
	int mid, u, v;
	long A = 0;
	for (u = 1, v = LIM; u < v;){
		mid = (u + v) >> 1;
		if (type == 1) A = area(mid, 1, N, M);
		else if (type == 2) A = area(p, 1, mid, M) - area(p - 1, 1, mid, M);
		else if (type == 3) A = area(p, l, l, mid) - area(p - 1, l, l, mid);
		if (A < key) u = mid + 1; else v = mid;
	}
	return u;
}

int main(){
	int c, l, p, Q;
	long q;
	while (scanf("%d %d %d", &N, &M, &P) == 3 && (M || N || P)){
		for (int i = 0; i < P; ++i) scanf("%d %d", &gr[i], &gc[i]);
		scanf("%d", &Q);
		for (int i = 0; i < Q; ++i){
			scanf("%lld", &q);
			p = bin_search(max(N, M), q, 1);
			q -= area(p - 1, 1, N, M);
			l = bin_search(N, q, 2, p);
			q -= area(p, 1, l - 1, M) - area(p - 1, 1, l - 1, M);
			c = bin_search(M, q, 3, p, l);
			printf("%d %d\n", l, c);
		}
		puts("-");
	}
	return 0;
}
