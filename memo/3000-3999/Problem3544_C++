#include <iostream>
#include <string.h>
#include <queue>

using namespace std;

const int di[] = { 0, 1, 0, -1 }, dj[] = { 1, 0, -1, 0 };

int w, h, si, sj, ti, tj;
int dist[64][64], wall[64][64][4];

bool in(int i, int j) { return 0 <= i && i < h && 0 <= j && j < w; }

int calc()
{
	memset(dist, -1, sizeof(dist));
	queue<pair<int, int>> q;
	q.push(pair<int, int>(si, sj));
	dist[si][sj] = 0;
	while (!q.empty()) {
		int i = q.front().first, j = q.front().second;
		q.pop();
		for (int d = 0; d < 4; d++) {
			const int ni = i + di[d], nj = j + dj[d];
			if (!in(ni, nj) || wall[i][j][d] || ~dist[ni][nj]) continue;
			dist[ni][nj] = dist[i][j] + 1;
			if (ni == ti && nj == tj) return dist[ti][tj];
			q.push(pair<int, int>(ni, nj));
		}

	}
	return -1;
}

int solve()
{
	int ans = 0, m = calc();
	for (int i = 0; i < h; i++) {
		for (int j = 0; j < w; j++) {
			for (int d = 0; d < 4; d++) {
				if (!wall[i][j][d]) {
					wall[i][j][d] = 1;
					ans = max(ans, calc() - m);
					wall[i][j][d] = 0;
				}
			}
		}
	}
	return ans;
}

int main()
{
	int n;
	scanf("%d%d%d", &w, &h, &n);
	for (int i = 0; i < n; i++) {
		int ai, aj, bi, bj;
		scanf("%d%d%d%d", &aj, &ai, &bj, &bi);
		if (aj == bj) {
			if (ai > bi) swap(ai, bi);
			for (int i1 = ai; i1 < bi; i1++) {
				if (aj) wall[i1][aj - 1][0] = 1;
				wall[i1][aj][2] = 1;
			}
		}
		if (ai == bi) {
			if (aj > bj) swap(aj, bj);
			for (int j = aj; j < bj; j++) {
				if (ai) wall[ai - 1][j][1] = 1;
				wall[ai][j][3] = 1;
			}
		}
	}
	scanf("%d%d%d%d", &sj, &si, &tj, &ti);
	printf("%d\n", solve());
	return 0;
}
