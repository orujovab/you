#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <iostream>
#include <assert.h>
#include <vector>
#include <queue>
#include <string>
#include <map>

using namespace std;

#define FORIT(it, c) for (__typeof((c).begin()) it = (c).begin(); it != (c).end(); it++)

int n, m, START, lm[20], lf[20], mapto[20][20], dist[15][1 << 22];

struct Edge {
	bool ban;
	char src, dest;
	int flag, cost;
	Edge(int src, int dest, int flag, int cost) : ban(0), src(src), dest(dest), flag(flag), cost(cost) { ; }
	Edge(int ban, int src, int dest, int flag, int cost) : ban(ban), src(src), dest(dest), flag(flag), cost(cost) { ; }
	bool operator<(const Edge &rhs) const { return cost > rhs.cost; }
};

typedef vector<vector<Edge>> Graph;
typedef vector<vector<int>> Matrix;

void PrintMatrix(const Matrix &matrix) {
	for (int y = 0; y < matrix.size(); y++) {
		for (int x = 0; x < matrix[y].size(); x++) printf("%d ", matrix[y][x]);
		puts("");
	}
}

Graph g, lg[20];

void Clear(int n, int m) { for (int i = 0; i < n; i++) memset(dist[i], 0x0f, sizeof(int) * (1 << m)); }

void TSP(const Graph &g, int s, int ini, int ef, int end) {
	queue<Edge> que;
	que.push(Edge(s, s, ini, 0));
	dist[s][ini] = 0;
	while (!que.empty()) {
		Edge e = que.front();
		que.pop();
		int from = e.dest;
		if (dist[from][e.flag] != e.cost) continue;
		if (from == end && e.flag == ef) { break; }
		FORIT(it, g[from]) {
			if (e.flag & it->flag) continue;
			int nfrom = from, nto = it->dest, nflag = e.flag | it->flag, ncost = e.cost + it->cost;
			if (dist[nto][nflag] <= ncost) continue;
			dist[nto][nflag] = ncost;
			que.push(Edge(nfrom, nto, nflag, ncost));
		}
	}
}

int TSP2(int ban, int from, int flag) {
	int ret = 1e7;
	FORIT(it, g[from]) {
		if (flag & it->flag) continue;
		int nban = (it->flag >= 1 << n) ? 1 : 0, to = it->dest;
		if (ban && nban) continue;
		int nflag = flag | it->flag;
		if (to == START && nflag == (1 << m) - 1) { ret = it->cost; break; }
		if (to == START) continue;
		if (!nban && dist[to][nflag] != 0x0f0f0f0f) ret = min(ret, dist[to][nflag] + it->cost);
		else ret = min(ret, TSP2(nban, to, nflag) + it->cost);
	}
	if (!ban) dist[from][flag] = ret;
	return ret;
}

void CalcMoveCost3(int c, int s, int e, int n1, int n2, int n3) {
	int bit = (1 << lm[c]) - 1;
	bit ^= 7;
	bit |= 1 << lm[c] + s;
	if (n1) { bit |= 1; }
	if (n2) { bit |= 2; }
	if (n3) { bit |= 4; }
	int cost = dist[e][bit], offset = mapto[c][0], from = mapto[c][s], to = mapto[c][e];
	int flag = 1 << m | n1 << offset + 0 | n2 << offset + 1 | n3 << offset + 2;
	if (cost >= 1e7) return;
	g[from].push_back(Edge(from, to, flag, cost));
}

void CalcMoveCost4(int c, int s, int e, int n1, int n2, int n3, int n4) {
	int bit = (1 << lm[c]) - 1;
	bit ^= 15;
	bit |= 1 << lm[c] + s;
	if (n1) { bit |= 1; }
	if (n2) { bit |= 2; }
	if (n3) { bit |= 4; }
	if (n4) { bit |= 8; }
	int cost = dist[e][bit], offset = mapto[c][0], from = mapto[c][s], to = mapto[c][e];
	int flag = 3 << m | n1 << offset + 0 | n2 << offset + 1 | n3 << offset + 2 | n4 << offset + 3;
	if (cost >= 1e7) return;
	g[from].push_back(Edge(from, to, flag, cost));
}

void CalcMoveCost4Divide(int c, int s1, int e1, int s2, int e2) {
	int left = 1 << lm[c] + s1 | 1 << e1;
	int right = 1 << lm[c] + s2 | 1 << e2;
	assert((left & right) == 0);
	int mask = ((1 << lm[c]) - 1) ^ 15, cost = 1e7;
	for (int i = 0; i <= mask; i++) {
		if ((mask | i) != mask) continue;
		int div = mask ^ i;
		cost = min(cost, dist[e1][left | i] + dist[e2][right | div]);
	}
	int offset = mapto[c][0], f1 = mapto[c][s1], t1 = mapto[c][e1], f2 = mapto[c][s2], t2 = mapto[c][e2];
	int flag1 = 1 << m | 1 << offset + e1, flag2 = 1 << m | 1 << offset + s1;
	int flag3 = 2 << m | 1 << offset + e2, flag4 = 2 << m | 1 << offset + s2;
	if (cost >= 1e7) return;
	g[f1].push_back(Edge(f1, t1, flag1, cost));
	g[t1].push_back(Edge(t1, f1, flag2, cost));
	g[f2].push_back(Edge(f2, t2, flag3, 0));
	g[t2].push_back(Edge(t2, f2, flag4, 0));
}

void MakeInnerEdge(int c) {
	int indexs[20];
	Clear(lm[c], lm[c] + lf[c]);
	for (int i = 0; i < lf[c]; i++) TSP(lg[c], i, 1 << lm[c] + i, -1, -1);
	indexs[c] = m;
	if (lf[c] == 2) {
		int from = mapto[c][0], to = mapto[c][1];
		int cost = dist[1][(1 << lm[c]) - 1 ^ 1 | 1 << lm[c]];
		g[from].push_back(Edge(from, to, 1 << m | 1 << to, cost));
		g[to].push_back(Edge(to, from, 1 << m | 1 << from, cost));
		m++;
	}
	else if (lf[c] == 3) {
		for (int s = 0; s < 3; s++) {
			for (int e = 0; e < 3; e++) {
				if (s == e) continue;
				for (int n1 = 0; n1 < 2; n1++) {
					if (s == 0 && n1) continue;
					if (e == 0 && !n1) continue;
					for (int n2 = 0; n2 < 2; n2++) {
						if (s == 1 && n2) continue;
						if (e == 1 && !n2) continue;
						for (int n3 = 0; n3 < 2; n3++) {
							if (s == 2 && n3) continue;
							if (e == 2 && !n3) continue;
							CalcMoveCost3(c, s, e, n1, n2, n3);
						}
					}
				}
			}
		}
		m++;
	}
	else if (lf[c] == 4) {
		// a -> some -> b -> other -> c -> rest -> d
		for (int s = 0; s < 4; s++) {
			for (int e = 0; e < 4; e++) {
				if (s == e) continue;
				for (int n1 = 0; n1 < 2; n1++) {
					if (s == 0 && n1) continue;
					if (e == 0 && !n1) continue;
					for (int n2 = 0; n2 < 2; n2++) {
						if (s == 1 && n2) continue;
						if (e == 1 && !n2) continue;
						for (int n3 = 0; n3 < 2; n3++) {
							if (s == 2 && n3) continue;
							if (e == 2 && !n3) continue;
							for (int n4 = 0; n4 < 2; n4++) {
								if (s == 3 && n4) continue;
								if (e == 3 && !n4) continue;
								CalcMoveCost4(c, s, e, n1, n2, n3, n4);
							}
						}
					}
				}
			}
		}
		// a -> some -> b, c -> rest -> d
		CalcMoveCost4Divide(c, 0, 1, 2, 3);
		CalcMoveCost4Divide(c, 0, 2, 1, 3);
		CalcMoveCost4Divide(c, 0, 3, 1, 2);
		m += 2;
	}
	else assert(false);
}

int main() {
	int k, ln;
	while (scanf("%d %d", &ln, &k) > 0) {
		int minValue = 5, minIndex = -1;
		g.clear();
		for (int i = 0; i < 20; i++) lg[i].clear();
		memset(mapto, 0xdf, sizeof(mapto));
		n = 0;
		for (int i = 0; i < ln; i++) {
			scanf("%d", &lm[i]);
			lg[i] = Graph(lm[i]);
		}
		for (int i = 0; i < ln; i++) {
			scanf("%d", &lf[i]);
			if (lf[i] < minValue) {
				minValue = lf[i];
				minIndex = i;
			}
			for (int j = 0; j < lf[i]; j++) mapto[i][j] = n++;
		}
		g = Graph(n);
		for (int i = 0; i < k; i++) {
			int fl, fs, tl, ts, c;
			scanf("%d %d %d %d %d", &fl, &fs, &tl, &ts, &c);
			fl--; fs--; tl--; ts--;
			if (mapto[fl][fs] >= 0 && mapto[tl][ts] >= 0) {
				int f = mapto[fl][fs], t = mapto[tl][ts];
				g[f].push_back(Edge(f, t, 1 << t, c));
				g[t].push_back(Edge(t, f, 1 << f, c));
			}
			if (fl == tl) {
				lg[fl][fs].push_back(Edge(fs, ts, 1 << ts, c));
				lg[fl][ts].push_back(Edge(ts, fs, 1 << fs, c));
			}
		}
		m = n;
		int ans = 1e7;
		if (ln == 1) {
			Clear(lm[0], lm[0]);
			TSP(lg[0], 0, 0, (1 << lm[0]) - 1, 0);
			ans = dist[0][(1 << lm[0]) - 1];
			if (lm[0] == 1) ans = 0;
		}
		else {
			for (int i = 0; i < ln; i++) {
				if (lm[i] == lf[i]) continue;
				if (lf[i] == 1) goto ANS;
				MakeInnerEdge(i);
			}
			assert(m <= 22);
			for (int i = 0; i < max(minValue - 1, 1); i++) {
				Clear(n, m);
				START = mapto[minIndex][i];
				dist[START][(1 << m) - 1] = 0;
				ans = min(ans, TSP2(0, START, 0));
			}
		}
	ANS: if (ans < 1e7) printf("%d\n", ans);
		 else puts("-1");
	}
}
