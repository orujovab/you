#include <iostream>
#include <string.h>

using namespace std;

int data[9][3], data2[9][3];
bool ans[55];
int tfill[8][2] = { { 0, 0 }, { 1, 0 }, { 2, 0 }, { 3, 0 }, { 4, 0 }, { 5, 0 }, { 0, 1 }, { 0, 2 } };
int dice[24][3] = {
	{ 1, 2, 3 }, { 1, 3, 5 }, { 1, 5, 4 }, { 1, 4, 2 },
	{ 2, 6, 3 }, { 2, 3, 1 }, { 2, 1, 4 }, { 2, 4, 6 },
	{ 3, 1, 2 }, { 3, 2, 6 }, { 3, 6, 5 }, { 3, 5, 1 },
	{ 4, 2, 1 }, { 4, 1, 5 }, { 4, 5, 6 }, { 4, 6, 2 },
	{ 5, 1, 3 }, { 5, 3, 6 }, { 5, 6, 4 }, { 5, 4, 1 },
	{ 6, 3, 2 }, { 6, 2, 4 }, { 6, 4, 5 }, { 6, 5, 3 },
};

bool fix(int x, int y, int z){
	int &t = data2[y][x], &f = data2[3 + z][x], &r = data2[6 + z][y];
	if ((t == 0) + (f == 0) + (r == 0) >= 2) throw 0;
	for (int i = 0; i < 24; i++)
		if ((t == 0 || t == dice[i][0]) && (f == 0 || f == dice[i][1]) && (r == 0 || r == dice[i][2])){
			t = dice[i][0];
			f = dice[i][1];
			r = dice[i][2];
			return true;
		}
	return false;
}

void dfs(int idx){
	if (idx == 8){
		memcpy(data2, data, sizeof(data));
		for (int x = 0; x < 3; x++)
			for (int y = 0; y < 3; y++)
				for (int z = 0; z < 3; z++) if (!fix(x, y, z)) return;

		int n = 0;
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 3; j++) n += data2[6 + i][j];

		ans[n] = true;
	}
	else
	{
		int y = tfill[idx][0], x = tfill[idx][1];
		if (data[y][x]) dfs(idx + 1);
		else
		{
			for (int i = 1; i <= 6; i++){
				data[y][x] = i;
				dfs(idx + 1);
			}
			data[y][x] = 0;
		}
	}
}

int main(){
	int cases;
	cin >> cases;
	while (cases--){
		memset(data, 0, sizeof(data));
		memset(ans, 0, sizeof(ans));
		for (int i = 0; i < 6; i++)
			for (int j = 0; j < 3; j++) cin >> data[i][j];

		dfs(0);
		bool ok = false;
		for (int i = 0; i <= 54; i++){
			if (!ans[i]) continue;
			if (ok) cout << " ";
			cout << i;
			ok = true;
		}
		if (!ok) cout << 0;
		cout << endl;
	}
	return 0;
}
