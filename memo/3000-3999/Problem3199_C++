#include <iostream>
#include <string>
#include <string.h>
#include <vector>
#include <algorithm>

using namespace std;

int calc(string &s1, string &s2, int idx1, int idx2, int data[16][16]){
	if (data[idx1][idx2] != -1) return data[idx1][idx2];
	int ans;
	if (s1.size() == idx1) ans = s2.size() - idx2;
	else if (s2.size() == idx2) ans = s1.size() - idx1;
	else
	{
		ans = min(calc(s1, s2, idx1 + 1, idx2, data), calc(s1, s2, idx1, idx2 + 1, data)) + 1;
		ans = min(ans, (s1[idx1] != s2[idx2]) + calc(s1, s2, idx1 + 1, idx2 + 1, data));
		if (s1.size() - idx1 >= 2 && s2.size() - idx2 >= 2)
			ans = min(ans, 1 + (s1[idx1] != s2[idx2 + 1]) + (s1[idx1 + 1] != s2[idx2]) + calc(s1, s2, idx1 + 2, idx2 + 2, data));
		if (s1.size() - idx1 >= 3 && s2.size() - idx2 >= 2)
			ans = min(ans, 2 + (s1[idx1] != s2[idx2 + 1]) + (s1[idx1 + 2] != s2[idx2]) + calc(s1, s2, idx1 + 3, idx2 + 2, data));
		if (s1.size() - idx1 >= 2 && s2.size() - idx2 >= 3)
			ans = min(ans, 2 + (s1[idx1] != s2[idx2 + 2]) + (s1[idx1 + 1] != s2[idx2]) + calc(s1, s2, idx1 + 2, idx2 + 3, data));
	}
	return data[idx1][idx2] = ans;
}

bool check(string &s1, string &s2, int d){
	int data[16][16];
	memset(data, -1, sizeof(data));
	return calc(s1, s2, 0, 0, data) <= d;
}

int main(){
	while (true){
		int n, d;
		cin >> n;
		if (!n) break;
		cin >> d;
		vector<string> names(n);
		for (int i = 0; i < n; i++) cin >> names[i];
		sort(names.begin(), names.end());
		int ans = 0;
		for (int i = 0; i < n; i++)
			for (int j = i + 1; j < n; j++)
				if (check(names[i], names[j], d)){
					ans++;
					cout << names[i] << "," << names[j] << endl;
				}
		cout << ans << endl;
	}
	return 0;
}
