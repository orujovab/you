#include <stdio.h>
#include <string.h>
#include <algorithm>

using namespace std;

long long mod = 10007, ux[40], uy[40], g[40][40], dp[40][40][4];
long long dx[] = { 1, 0, -1, 0 }, dy[] = { 0, 1, 0, -1 };

int main(){
	int n, m;
	scanf("%d%d", &n, &m);
	int s = n & 1, t = n / 2;
	for (int i = 0; i < m; i++){
		int x, y;
		scanf("%d%d", &x, &y);
		ux[x] |= 1 << i;
		uy[y] |= 1 << i;
	}
	long long res = 0;
	for (int i = 0; i < 1 << m; i++){
		int dg = 0, bt = __builtin_popcount(i);
		bool ok = true;
		for (int j = 0; j < n; j++){
			if (__builtin_popcount(ux[j] & i) > 1 || __builtin_popcount(uy[j] & i) > 1) ok = false;
			for (int k = 0; k < n; k++){
				g[j][k] = (ux[j] | uy[k])&i;
				if (ux[j] & uy[k] & i){
					if (j == k) dg |= 1;
					if (j == n - k - 1) dg |= 2;
				}
			}
		}
		if (!ok) continue;
		memset(dp, 0, sizeof(dp));
		dp[0][bt][dg] = 1;
		if (s&&!g[t][t]) dp[0][bt + 1][3] = 1;
		for (int j = 1; j <= t; j++){
			int left = t - j, len = 2 * j + s;
			int fr[4] = {}, fr2[4] = {};
			for (int k = 0, a = left, b = left; k < 4; k++){
				for (int l = 0; l < len - 1; l++, a += dx[k], b += dy[k]){
					if (!g[a][b]){
						if (l == 0) fr2[k] = 1;
						else fr[k]++;
					}
				}
			}
			for (int k = bt; k <= n; k++){
				int ms = k - bt, fr3[4], fr4[2];
				for (int l = 0; l < 4; l++) fr3[l] = max(0, fr[l] - ms);
				fr4[0] = max(0, fr3[0] * (fr3[2] - 1));
				fr4[1] = max(0, fr3[1] * (fr3[3] - 1));
				for (int l = 0; l < 4; l++){
					int dd = dp[j - 1][k][l];
					(dp[j][k][l] += dd) %= mod;
					(dp[j][k + 1][l] += (fr3[0] + fr3[1] + fr3[2] + fr3[3])*dd) %= mod;
					(dp[j][k + 1][l | 1] += (fr2[0] + fr2[2])*dd) %= mod;
					(dp[j][k + 1][l | 2] += (fr2[1] + fr2[3])*dd) %= mod;
					(dp[j][k + 2][l] += (fr3[0] * fr3[1] + fr4[0] + fr3[0] * fr3[3] + fr3[1] * fr3[2] + fr4[1] + fr3[2] * fr3[3])*dd) %= mod;
					(dp[j][k + 2][l | 1] += (fr2[0] * (fr3[1] + fr3[2]) + fr2[2] * (fr3[3] + fr3[0]) + fr2[0] * fr2[2])*dd) %= mod;
					(dp[j][k + 2][l | 2] += (fr2[1] * (fr3[2] + fr3[3]) + fr2[3] * (fr3[0] + fr3[1]) + fr2[1] * fr2[3])*dd) %= mod;
					(dp[j][k + 3][l] += (fr4[0] * (fr3[1] + fr3[3]) + fr4[1] * (fr3[0] + fr3[2]))*dd) %= mod;
					(dp[j][k + 3][l | 1] += (fr2[0] * (fr3[1] * fr3[2]) + fr2[2] * (fr3[3] * fr3[0]))*dd) %= mod;
					(dp[j][k + 3][l | 2] += (fr2[1] * (fr3[2] * fr3[3]) + fr2[3] * (fr3[0] * fr3[1]))*dd) %= mod;
					(dp[j][k + 4][l] += fr4[0] * fr4[1] * dd) %= mod;
				}
			}
		}
		(res += dp[t][n][3] * (bt & 1 ? -1 : 1)) %= mod;
	}
	printf("%lld\n", (res + mod) % mod);
	return 0;
}
