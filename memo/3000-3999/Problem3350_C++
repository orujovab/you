#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <queue>
#include <set>

using namespace std;

int cap[80][80];
set<int> g[80];

int flow(int n, int source, int sink){
	int ans = 0, prev1[80], res[80][80];
	memcpy(res, cap, sizeof cap);
	while (true){
		memset(prev1, -1, sizeof prev1);
		prev1[source] = -2;
		queue<int> q;
		q.push(source);
		while (q.size() && prev1[sink] == -1){
			int u = q.front();
			q.pop();
			for (set<int>::iterator i = g[u].begin(); i != g[u].end(); ++i){
				const int &v = *i;
				if (prev1[v] == -1 && res[u][v] > 0){
					prev1[v] = u;
					q.push(v);
				}
			}
		}
		if (prev1[sink] == -1) break;
		int bot = 8000;
		for (int i = sink; prev1[i] >= 0; i = prev1[i]) bot = min(bot, res[prev1[i]][i]);
		for (int i = sink; prev1[i] >= 0; i = prev1[i]){
			res[prev1[i]][i] -= bot;
			res[i][prev1[i]] += bot;
		}
		ans += bot;
	}
	return ans;
}

int main(){
	for (int n, m, f; scanf("%d%d", &n, &m) == 2; printf("%d\n", f)){
		if (n == 0) f = 0;
		else
			if (n == 1) f = 1;
			else
				if (m == 0) f = 0;
				else
				{
					memset(cap, 0, sizeof cap);
					for (int i = 0; i < 2 * n; g[i++].clear());
					for (int i = 0; i < n; ++i)
					{
						cap[2 * i][2 * i + 1] = 1;
						g[2 * i].insert(2 * i + 1), g[2 * i + 1].insert(2 * i);
					}
					for (int u, v; m-- && scanf(" (%d,%d)", &u, &v) != EOF;)
					{
						g[2 * u + 1].insert(2 * v), g[2 * v].insert(2 * u + 1);
						g[2 * v + 1].insert(2 * u), g[2 * u].insert(2 * v + 1);
						cap[2 * u + 1][2 * v] = 8000;
						cap[2 * v + 1][2 * u] = 8000;
					}
					f = 8000;
					for (int s = 0; s < n; ++s)
						for (int t = s + 1; t < n; ++t){
							int k = flow(2 * n, 2 * s + 1, 2 * t);
							f = min(f, k);
						}
					if (f >= 8000) f = n;
				}
	}
	return 0;
}
