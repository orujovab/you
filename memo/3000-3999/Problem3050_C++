#include <cstdio>
#include <cstring>
#include <algorithm>

using namespace std;

#define INF 1<<30
#define maxn 1010
#define maxm 100000

int e, S, T, d[maxn], first[maxn], work[maxn], v[maxm], w[maxm], next1[maxm];

void add_edge(int a, int b, int c){
	v[e] = b; next1[e] = first[a]; w[e] = c; first[a] = e++;
	v[e] = a; next1[e] = first[b]; w[e] = 0; first[b] = e++;
}

int bfs(){
	int rear = 0, q[maxn];
	memset(d, -1, sizeof(d));
	d[S] = 0; q[rear++] = S;
	for (int i = 0; i < rear; i++){
		for (int j = first[q[i]]; j != -1; j = next1[j])
			if (w[j] && d[v[j]] == -1){
				d[v[j]] = d[q[i]] + 1;
				q[rear++] = v[j];
				if (v[j] == T) return 1;
			}
	}
	return 0;
}

int dfs(int cur, int a){
	if (cur == T) return a;
	for (int &i = work[cur]; i != -1; i = next1[i]){
		if (w[i] && d[v[i]] == d[cur] + 1)
			if (int t = dfs(v[i], min(a, w[i]))){
				w[i] -= t; w[i ^ 1] += t;
				return t;
			}
	}
	return 0;
}

struct Node{
	int x, y, r;
	double fr;
} node[310];

bool judge(Node a, Node b){
	int x1 = a.x, y1 = a.y, r1 = a.r;
	int x2 = b.x, y2 = b.y, r2 = b.r;
	if ((x1 - x2)*(x1 - x2) + (y1 - y2)*(y1 - y2) < (r1 + r2)*(r1 + r2)) return true;
	return false;
}

int main()
{
	int kase, n;
	scanf("%d", &kase);
	while (kase--){
		e = 0;
		memset(first, -1, sizeof(first));
		scanf("%d", &n);
		for (int i = 0; i < n; i++){
			scanf("%lf%d%d%d", &node[i].fr, &node[i].x, &node[i].y, &node[i].r);
			if (node[i].fr == 400.0) T = i;
			else if (node[i].fr == 789.0) S = i;
			else add_edge(i, i + n, 1);
		}
		if (judge(node[S], node[T])){
			printf("Game is VALID\n");
			continue;
		}
		add_edge(S, S + n, 2);
		for (int i = 0; i < n; i++){
			for (int j = i + 1; j < n; j++){
				if (judge(node[i], node[j])){
					if (node[i].fr < node[j].fr) add_edge(j + n, i, 1);
					else add_edge(i + n, j, 1);
				}
			}
		}
		int ans = 0;
		while (bfs())
		{
			memcpy(work, first, sizeof(first));
			while (int t = dfs(S, INF)) ans += t;
		}
		if (ans == 2) printf("Game is VALID\n");
		else printf("Game is NOT VALID\n");
	}
	return 0;
}
