#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

#define maxn 1101
vector<int> G[1101];

long read()
{
	long x = 0, f = 1;
	char ch = getchar();
	while (ch < '0' || ch > '9')
	{
		if (ch == '-') f = -1;
		ch = getchar();
	}
	while ('0' <= ch && ch <= '9')
	{
		x = x * 10 + ch - '0';
		ch = getchar();
	}
	return x*f;
}


struct node
{
	int x, y;
};

node kiss[10001];

int main()
{
	int n = read(), k = read();
	for (int i = 0; i < n; i++)
	{
		kiss[i + 1].x = read();
		int tmp = 0, num = read();
		for (int j = 0; j < num; j++)
		{
			int x = read();
			tmp = tmp | 1 << x - 1;
		}
		kiss[i + 1].y = tmp;
		G[tmp].push_back(kiss[i + 1].x);
	}
	for (int i = 0; i < maxn; i++) sort(G[i].begin(), G[i].end());
	int m = read();
	for (int i = 0; i < m; i++)
	{
		int tmp = 0, id = read(), num = read();
		for (int j = 0; j < num; j++)
		{
			int x = read();
			tmp = tmp | 1 << x - 1;
		}
		int ans = 0;
		for (int j = 0; j < maxn; j++)
			if ((j & tmp) == (kiss[id].y & tmp))
				ans += G[j].size() - (upper_bound(G[j].begin(), G[j].end(), kiss[id].x) - G[j].begin());
		printf("%d\n", ans + 1);
	}
	return 0;
}
