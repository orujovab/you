#include <iostream>

using namespace std;

const int N = 1 << 18;
int p, v, ql, qr, pro[N];
char ans[N];

int query(int o, int L, int R){
	int M = (L + R) / 2, ans = 1;
	if (ql <= L && R <= qr) return pro[o];
	if (ql <= M) ans *= query(o * 2, L, M);
	if (M < qr)  ans *= query(o * 2 + 1, M + 1, R);
	return ans;
}

void update(int o, int L, int R){
	int M = (L + R) / 2;
	if (L == R) pro[o] = v;
	else{
		if (p <= M) update(o * 2, L, M);
		else update(o * 2 + 1, M + 1, R);
		pro[o] = pro[o * 2] * pro[o * 2 + 1];
	}
}

void build(int L, int R, int o){
	int M = (L + R) / 2;
	if (L == R){
		int t;
		scanf("%d", &t);
		if (t == 0) pro[o] = 0;
		if (t > 0) pro[o] = 1;
		if (t < 0) pro[o] = -1;
		return;
	}
	build(L, M, o * 2);
	build(M + 1, R, o * 2 + 1);
	pro[o] = pro[o * 2] * pro[o * 2 + 1];
}

int main(){
	int n, Q;
	while (~scanf("%d%d", &n, &Q)){
		build(1, n, 1);
		char op[10];
		int cnt = 0;
		for (int i = 0; i < Q; i++){
			scanf("%s", op);
			if (op[0] == 'C'){
				scanf("%d%d", &p, &v);
				if (v > 0) v = 1;
				else if (v < 0) v = -1;
				update(1, 1, n);
			}
			else if (op[0] == 'P'){
				scanf("%d%d", &ql, &qr);
				if (query(1, 1, n) == 0) ans[cnt++] = '0';
				else if (query(1, 1, n)>0) ans[cnt++] = '+';
				else if (query(1, 1, n) < 0) ans[cnt++] = '-';
			}
		}
		ans[cnt] = '\0';
		puts(ans);
	}
	return 0;
}
