#include <iostream>
#include <algorithm>

using namespace std;

const int mm = 88888, mn = 222;
int ver[mm], next1[mm], x[mn], y[mn], head[mn], dfn[mn], low[mn], q[mn], id[mn];
int i, j, l, r, m, n, t, idx, top, cnt, edge, ans;

void add(int u, int v)
{
	ver[edge] = v, next1[edge] = head[u], head[u] = edge++;
}

void dfs(int u)
{
	dfn[u] = low[u] = ++idx;
	q[top++] = u;
	for (int i = head[u], v; i >= 0; i = next1[i])
		if (!dfn[v = ver[i]]) dfs(v), low[u] = min(low[u], low[v]);
		else if (!id[v])low[u] = min(low[u], dfn[v]);
		if (low[u] == dfn[u])
		{
			id[u] = ++cnt;
			while (q[--top] != u)id[q[top]] = cnt;
		}
}

void Tarjan()
{
	for (idx = top = cnt = i = 0; i < n + n; ++i) dfn[i] = id[i] = 0;
	for (i = 0; i < n + n; ++i) if (!dfn[i]) dfs(i);
}

bool ok()
{
	for (edge = i = 0; i < n + n; ++i) head[i] = -1;
	for (i = 0; i < n; ++i)
		for (j = i + 1; j < n; ++j)
			if (abs(x[i] - x[j]) < m && abs(y[i] - y[j]) < 2 * m)
			{
				if (abs(y[i] - y[j]) >= m)
				{
					if (y[i] < y[j])
					{
						add(i << 1 | 1, j << 1 | 1);
						add(j << 1, i << 1);
					}
					else
					{
						add(i << 1, j << 1);
						add(j << 1 | 1, i << 1 | 1);
					}
				}
				else if (y[i] < y[j])add(i << 1 | 1, i << 1), add(j << 1, j << 1 | 1);
				else if (y[i] > y[j])add(i << 1, i << 1 | 1), add(j << 1 | 1, j << 1);
				else
				{
					add(i << 1 | 1, j << 1), add(i << 1, j << 1 | 1);
					add(j << 1, i << 1 | 1), add(j << 1 | 1, i << 1);
				}
			}
	Tarjan();
	for (i = 0; i < n + n; i += 2) if (id[i] == id[i ^ 1]) return 0;
	return 1;
}

int main()
{
	scanf("%d", &t);
	while (t--)
	{
		scanf("%d", &n);
		for (i = 0; i < n; ++i) scanf("%d%d", &x[i], &y[i]);
		ans = l = 0, r = 1e5;
		while (l <= r)
		{
			m = (l + r) >> 1;
			if (ok()) ans = m, l = m + 1;
			else r = m - 1;
		}
		printf("%d\n", ans);
	}
	return 0;
}
