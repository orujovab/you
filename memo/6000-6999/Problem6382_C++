#include <iostream>
#include <queue>
#include <math.h>
#include <string.h>

using namespace std;

char ss[15];
const int k_size = 2;
const int LEN = 12;

struct Tire_Tree
{
	int fail, p;//0,1,-1 
	int next[k_size];
	void init()
	{
		p = -1;
		fail = -1;
		memset(next, -1, sizeof next);
	}
} tire[2 * LEN];

int tire_cnt, tire_q[2 * LEN], dui[2 * LEN];

int gcd(int a, int b)
{
	if (b == 0)return a;
	return gcd(b, a%b);
}

struct Fraction
{
	int a, b;
	Fraction(int x = 1, int y = 1) :a(x), b(y){}
	Fraction(const Fraction &tt) :a(tt.a), b(tt.b){}
	void init()
	{
		int g = gcd(a, b);
		a /= g;
		b /= g;
		if (a == 0)b = 1;
	}
	double val() const { return (a + 0.0) / b; }
	bool operator < (const Fraction &tt) const { return a*tt.b < tt.a*b; }
	bool operator > (const Fraction &tt) const { return a*tt.b > tt.a*b; }
	bool operator == (const Fraction &tt) const { return a*tt.b == tt.a*b; }
	bool operator != (const Fraction &tt) const { return a*tt.b != tt.a*b; }
	bool operator <= (const Fraction &tt) const { return a*tt.b <= tt.a*b; }
	bool operator >= (const Fraction &tt) const { return a*tt.b >= tt.a*b; }

	Fraction operator + (const Fraction &tt) const
	{
		Fraction temp;
		temp.a = a*tt.b + tt.a*b;
		temp.b = b*tt.b;
		temp.init();
		return temp;
	}
	Fraction operator - (const Fraction &tt) const
	{
		Fraction temp;
		temp.a = a*tt.b - tt.a*b;
		temp.b = b*tt.b;
		temp.init();
		return temp;
	}
	Fraction operator * (const Fraction &tt) const
	{
		Fraction temp;
		temp.a = a*tt.a;
		temp.b = b*tt.b;
		temp.init();
		return temp;
	}
	Fraction operator / (const Fraction &tt) const
	{
		Fraction temp;
		temp.a = a*tt.b;
		temp.b = b*tt.a;
		temp.init();
		return temp;
	}
};

void tire_insert(char *str, int le, int root)
{
	int i, x, p = root;
	for (i = 0; str[i]; i++)
	{
		if (str[i] == 'T') x = 0;
		else x = 1;
		if (tire[p].next[x] == -1)
		{
			tire_cnt++;
			tire[tire_cnt].init();
			tire[p].next[x] = tire_cnt;
		}
		p = tire[p].next[x];
	}
	tire[p].p = le;
}

void init_fail(int root)
{
	int head = 1, tail = 0, i, fa, p = root;
	tire[root].fail = root;
	for (i = 0; i < k_size; i++)
	{
		if (tire[p].next[i] != -1)
		{
			tire_q[++tail] = tire[p].next[i];
			tire[tire_q[tail]].fail = root;
		}
		else tire[p].next[i] = root;
	}
	while (head <= tail)
	{
		p = tire_q[head++];
		fa = tire[p].fail;
		for (i = 0; i < k_size; i++)
		{
			if (tire[p].next[i] != -1)
			{
				tire_q[++tail] = tire[p].next[i];
				tire[tire_q[tail]].fail = tire[fa].next[i];
			}
			else tire[p].next[i] = tire[fa].next[i];
		}
	}
}

Fraction gss[2 * LEN][2 * LEN + 1];
Fraction gss_ans[2 * LEN];

void gauss(int n, int m)
{
	int i, j, k, pca;
	Fraction temp, temp1;
	for (i = 0; i < n; i++)
	{
		pca = i;
		for (j = i + 1; j<n; j++)
		{
			if (fabs(gss[j][i].val()) > fabs(gss[pca][i].val())) pca = j;
		}
		if (pca != i)
		{
			for (j = i; j < m; j++) swap(gss[i][j], gss[pca][j]);
		}
		if (gss[i][i] != Fraction(0, 1))
		{
			for (j = i + 1; j < n; j++)
			{
				temp = gss[j][i] / gss[i][i];
				gss[j][i] = Fraction(0, 1);
				for (k = i + 1; k < m; k++)
				{
					temp1 = gss[i][k] * temp;
					gss[j][k] = gss[j][k] - temp1;
				}
			}
		}
	}
	for (i = m - 2; i >= 0; i--)
	{
		gss_ans[i] = gss[i][m - 1];
		for (j = i + 1; j < m - 1; j++)
		{
			temp = gss_ans[j] * gss[i][j];
			gss_ans[i] = gss_ans[i] - temp;
		}
		gss_ans[i] = gss_ans[i] / gss[i][i];
	}
}

int main()
{
	int i, j, tire_root, n, m, tol, y, z;
	while (1)
	{
		scanf("%s", ss);
		if (strcmp(ss, "$") == 0) break;
		tire_root = tire_cnt = 0;
		tire[0].init();
		tire_insert(ss, 1, tire_root);
		scanf("%s", ss);
		tire_insert(ss, 0, tire_root);
		init_fail(tire_root);
		n = tire_cnt + 1;
		m = tire_cnt;
		tol = 0;
		for (i = 0; i <= tire_cnt; i++)
		{
			if (tire[i].p == -1) dui[i] = tol++;
		}
		for (i = 0; i < n; i++)
			for (j = 0; j < m; j++) gss[i][j] = Fraction(0, 1);

		for (i = 0; i <= tire_cnt; i++)
		{
			if (tire[i].p != -1) continue;
			y = tire[i].next[0];
			z = tire[i].next[1];
			gss[i][dui[i]] = gss[i][dui[i]] + Fraction(1, 1);
			if (tire[y].p == -1) gss[i][dui[y]] = gss[i][dui[y]] + Fraction(-1, 2);
			else if (tire[y].p == 1) gss[i][m - 1] = gss[i][m - 1] + Fraction(1, 2);
			if (tire[z].p == -1) gss[i][dui[z]] = gss[i][dui[z]] + Fraction(-1, 2);
			else if (tire[z].p == 1) gss[i][m - 1] = gss[i][m - 1] + Fraction(1, 2);
		}
		gauss(n, m);
		printf("%d/%d\n", gss_ans[dui[0]].a, gss_ans[dui[0]].b);
	}
	return 0;
}
