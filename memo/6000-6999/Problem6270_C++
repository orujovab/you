#include <iostream>
#include <queue>

using namespace std;

int a, b, c, d;

int gcd(int a, int b)
{
	if (b == 0) return a;
	return gcd(b, a%b);
}

bool check(int n, int m)
{
	if (b > m) return false;
	if (c > n) return false;
	if (a >= n) return false;
	if (d >= m) return false;
	if (n%a != 0) return false;
	if (m%b != 0) return false;
	return true;
}

void getedge(int n, int m)
{
	priority_queue<pair<int, int> >Q;
	for (int i = 1; i <= n; i++) Q.push(make_pair(a, i));
	while (!Q.empty())
	{
		pair<int, int> now = Q.top();
		Q.pop();
		for (int i = 0; i < now.first; i++)
		{
			pair<int, int> next = Q.top();
			Q.pop();
			printf("%d %d\n", now.second, next.second);
			next.first--;
			Q.push(next);
		}
	}
	for (int i = n + 1; i <= n + m; i++) Q.push(make_pair(d, i));
	while (!Q.empty())
	{
		pair<int, int> now = Q.top();
		Q.pop();
		for (int i = 0; i < now.first; i++)
		{
			pair<int, int> next = Q.top();
			Q.pop();
			printf("%d %d\n", now.second, next.second);
			next.first--;
			Q.push(next);
		}
	}
	priority_queue<pair<int, int>> Q1, Q2;
	for (int i = 1; i <= n; i++) Q1.push(make_pair(b, i));
	for (int i = n + 1; i <= m + n; i++) Q2.push(make_pair(c, i));
	while (!Q1.empty())
	{
		pair<int, int> now = Q1.top();
		Q1.pop();
		for (int i = 0; i < now.first; i++)
		{
			pair<int, int> next = Q2.top();
			Q2.pop();
			printf("%d %d\n", now.second, next.second);
			next.first--;
			if (next.first != 0)Q2.push(next);
		}
	}
}

int main()
{
	scanf("%d%d%d%d", &a, &b, &c, &d);
	int t = gcd(b, c);
	int x = b / t, y = c / t, n, m;
	for (n = b, m = c; n <= d || m <= a || m & 1 && a & 1 || n & 1 && d & 1; n += x, m += y);
	swap(n, m);
	cout << n << " " << m << endl;
	getedge(n, m);
}
