#include <iostream>
#include <string.h>

using namespace std;

int dx[] = { -1, 0, 0, 1 }, dy[] = { 0, -1, 1, 0 };
const int maxn = 901, maxm = 100, maxt = maxn * maxm;

int ANS, CNT, S[maxm], O[maxn], L[maxt], R[maxt], U[maxt], D[maxt], C[maxt], W[maxt], mat[maxn][maxm];

void build(int n, int m)
{
	int i, j, tot = m, first;
	R[0] = 1; L[0] = m;
	for (i = 1; i <= m; i++)
	{
		L[i] = i - 1; R[i] = (i + 1) % (m + 1);
		U[i] = D[i] = C[i] = i; S[i] = 0;
	}
	for (i = 1; i <= n; i++)
	{
		first = 0;
		for (j = 1; j <= m; j++)
			if (mat[i][j])
			{
				tot++;
				U[tot] = U[j]; D[tot] = j;
				D[U[j]] = tot; U[j] = tot;
				if (first == 0) first = L[tot] = R[tot] = tot;
				else
				{
					L[tot] = L[first]; R[tot] = first;
					R[L[first]] = tot; L[first] = tot;
				}
				W[tot] = i; C[tot] = j; S[j]++;
			}
	}
}

void remove(int c)
{
	int i, j;
	//remove column c and all row i that A[i][c] == 1
	L[R[c]] = L[c];
	R[L[c]] = R[c];
	//remove column c;
	for (i = D[c]; i != c; i = D[i])
	{
		//remove i that A[i][c] == 1
		for (j = R[i]; j != i; j = R[j])
		{
			U[D[j]] = U[j];
			D[U[j]] = D[j];
			S[C[j]]--;
			//decrease the count of column C[j];
		}
	}
}

void resume(int c)
{
	int i, j;
	for (i = U[c]; i != c; i = U[i])
	{
		for (j = L[i]; j != i; j = L[j])
		{
			S[C[j]]++;
			U[D[j]] = j;
			D[U[j]] = j;
		}
	}
	L[R[c]] = c;
	R[L[c]] = c;
}

int dfs(int k)
{
	CNT++;
	if (CNT > 10000) return 0;
	int i, j, t, m = maxm, mn = 0;
	if (R[0] == 0)
	{
		//One of the answers has been found.
		ANS = k;
		return 1;
	}
	for (t = R[0]; t != 0; t = R[t])
		if (S[t] < m)
		{
			m = S[t];
			mn = t;
		}
	remove(mn);
	for (i = D[mn]; i != mn; i = D[i])
	{
		O[k] = i;//record the answer.
		for (j = R[i]; j != i; j = R[j]) remove(C[j]);
		if (dfs(k + 1)) return 1;
		for (j = L[i]; j != i; j = L[j]) resume(C[j]);
	}
	resume(mn);
	return 0;
}

int l[10], ch[25][25], vis[10], col[30];

int main()
{
	int n, m, k;
	for (int i = 1; i <= 26; i++) col[i] = i + 'a' - 1;
	while (scanf("%d%d%d", &n, &m, &k) != EOF)
	{
		for (int i = 0; i < k; i++) scanf("%d", &l[i]);
		memset(mat, 0, sizeof mat);
		int q = 1;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < m; j++)
			{
				for (int p = 0; p < k; p++)
				{
					if (j + l[p] <= m)
						for (int x = 0; x < l[p]; x++) mat[q][i * m + j + x + 1] = 1;
					q++;
					if (i + l[p] <= n)
						for (int x = 0; x < l[p]; x++) mat[q][(i + x) * m + j + 1] = 1;
					q++;
				}
			}
		}
		build(q - 1, n * m);
		CNT = 0;
		int z, x, y, u, v, xx, yy;
		if (dfs(0) == 0) puts("NO");
		else
		{
			printf("YES\n");
			memset(ch, 0, sizeof ch);
			for (int i = 0; i < ANS; i++)
			{
				z = W[O[i]] - 1;
				x = z / (2 * k) / m;
				y = z / (2 * k) % m;
				u = z % (2 * k) / 2;
				v = z % 2;
				memset(vis, 0, sizeof vis);
				int j;
				if (!v)
				{
					for (int p = 0; p < l[u]; p++)
					{
						for (j = 0; j < 4; j++)
						{
							xx = x + dx[j], yy = y + p + dy[j];
							if (xx < n && xx >= 0 && yy < m && yy >= 0) vis[ch[xx][yy]] = 1;
						}
					}
					for (j = 1;; j++) if (!vis[j]) break;
					for (int p = 0; p < l[u]; p++) ch[x][p + y] = j;
				}
				else
				{
					for (int p = 0; p < l[u]; p++)
					{
						for (j = 0; j < 4; j++)
						{
							xx = x + p + dx[j], yy = y + dy[j];
							if (xx < n && xx >= 0 && yy < m && yy >= 0) vis[ch[xx][yy]] = 1;
						}
					}
					for (j = 1;; j++) if (!vis[j]) break;
					for (int p = 0; p < l[u]; p++) ch[p + x][y] = j;
				}
			}
			for (int i = 0; i < n; i++)
			{
				for (int j = 0; j < m; j++) printf("%c", col[ch[i][j]]);
				printf("\n");
			}
		}
	}
	return 0;
}
