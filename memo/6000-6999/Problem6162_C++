#include <iostream>
#include <map>
#include <algorithm>

using namespace std;

typedef long long ll;
typedef pair<ll, ll> P;

ll n, x, y, w;
map<P, ll> m;

int dy[4][3] = { { -1, -1, 0 }, { 0, 1, 1 }, { 1, 1, 0 }, { 0, -1, -1 } };
int dx[4][3] = { { 0, 1, 1 }, { 1, 1, 0 }, { 0, -1, -1 }, { -1, -1, 0 } };

int main(){
	cin >> n;
	for (int i = 0; i < n; i++){
		cin >> x >> y >> w;
		m[P(x, y)] = w;
	}
	ll res = 0;
	for (map<P, ll>::iterator it = m.begin(); it != m.end(); ++it){
		ll x = it->first.first, y = it->first.second;
		for (int i = 0; i < 4; i++){
			ll tmp = it->second;
			for (int j = 0; j < 3; j++){
				P p = P(x + dx[i][j], y + dy[i][j]);
				if (m.find(p) != m.end())tmp += m[p];
			}
			res = max(res, tmp);
		}
	}
	cout << res << " / 1" << endl;
}
