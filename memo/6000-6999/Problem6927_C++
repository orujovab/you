#include <stdio.h>
#include <string.h>

const int maxn = 22000;

long plus[2][2 * maxn], minus[2][2 * maxn]; // shift MAXN

void solve(int n, int f, int A[]) {
	int i, j, k, roll = 0, L, R;
	memset(plus, 0, sizeof plus);
	memset(minus, 0, sizeof minus);
	plus[roll][maxn + A[0]] = 1;
	minus[roll][maxn - A[0]] = 1;
	L = maxn - A[0];
	R = maxn + A[0];
	for (i = 1; i < n; i++) {
		memset(plus[1 - roll], 0, sizeof plus[0]);
		memset(minus[1 - roll], 0, sizeof minus[0]);
		for (j = L; j <= R; j++) {
			if (plus[roll][j] || minus[roll][j]) {
				k = j + A[i];
				plus[1 - roll][k] |= plus[roll][j] | (1L << i);
				minus[1 - roll][k] |= minus[roll][j];
				k = j - A[i];
				plus[1 - roll][k] |= plus[roll][j];
				minus[1 - roll][k] |= minus[roll][j] | (1L << i);
			}
		}
		L -= A[i];
		R += A[i];
		roll = 1 - roll;
	}
	long a = plus[roll][f + maxn], b = minus[roll][f + maxn];
	if (a == 0 && b == 0) {
		puts("*");
		return;
	}
	for (i = 0; i < n; i++) {
		if ((a >> i) & 1) {
			if ((b >> i) & 1) putchar('?');
			else putchar('+');
		}
		else putchar('-');
	}
	puts("");
}

int main() {
	int n, f, A[50], i;
	while (scanf("%d %d", &n, &f) == 2 && n) {
		for (i = 0; i < n; i++) scanf("%d", &A[i]);
		solve(n, f, A);
	}
	return 0;
}
